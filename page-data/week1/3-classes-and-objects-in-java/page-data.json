{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week1/3-classes-and-objects-in-java","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You revise your knowledge on classes and objects."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You understand what a constructor is, and you are able to make one yourself."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how to use the Java Documentation and open API for existing classes and their methods."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You can tell the difference between static and non-static methods."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know that most objects store references to values."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You are familiar with the null and this reference."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Last year, you have started your journey in the world of object-oriented programming in the course Introduction to Programming. We'll shortly review the use of objects and methods."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Revision of Classes and Objects"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A class defines the attributes of objects, i.e., the information related to them (instance variables), and their commands, i.e., their methods. The values of instance (i.e., object) variables define the internal state of an individual object, whereas methods define the functionality it offers.\nA method is a piece of code written inside a class that can be called. A method is always part of some class and is often used to modify the internal state of an object instantiated from a class.\nAn object is always instantiated by calling a method that created an object, i.e., a constructor by using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" keyword."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A class thus specifies what the objects instantiated from it are like."}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The object's variables (instance variables) specify the internal state of the object."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The object's methods specify what the object does."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you make your own class, you should write Javadoc style comments that start with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"/**"}]},{"type":"text","value":" for every method in the class, but also for the class itself. Within the class Javadoc comment, you should also state who the author is, using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"@author"}]},{"type":"text","value":" annotation. For public methods, you explain the use of the method, the parameters and return types."}]},{"type":"comment","value":" TODO: misschien overview week 1 slide 37 over wat objects/statements/methods zijn enzo "},{"type":"text","value":"."},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's create a class named "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":". For this class, we create a separate file named "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Person.java"}]},{"type":"text","value":". Our program now consists of two separate files, since the main program is also in its own file. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Person.java"}]},{"type":"text","value":" file initially contains the class definition "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"public class Person"}]},{"type":"text","value":" and the curly brackets that confine the contents of the class.\nA class defines the attributes and behaviors of objects that are created from it. Let's decide that each person object has a name and an age. It's natural to represent the name as a string, and the age as an integer. We'll go ahead and add these to our blueprint:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" name"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" age"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We specify above that each object created from the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":" class has a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" and an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"age"}]},{"type":"text","value":". Variables defined inside a class are called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"instance variables"}]},{"type":"text","value":".\nInstance variables are written on the lines following the class definition "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public class Person {"}]},{"type":"text","value":". Each variable is preceded by the keyword private. The keyword "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" means that the variables are \"hidden\" inside the object, which is known as "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"encapsulation"}]},{"type":"text","value":". "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Public"}]},{"type":"text","value":" variables, on the other hand, are variables that are visible from outside the class."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Defining a Constructor"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We want to set an initial state for an object that's created. Custom objects are created the same way as objects from pre-made Java classes, such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":", using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" keyword. It'd be convenient to pass values to the variables of that object as it's being created. For example, when creating a new person object, it's useful to be able to provide it with a name:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"main"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" args"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":" ada "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Person"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Ada\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// ..."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is achieved by defining the method that creates the object, i.e., its constructor. The constructor is defined after the instance variables. In the following example, a constructor is defined for the Person class, which can be used to create a new Person object. The constructor sets the age of the object being created to 0, and the string passed to the constructor as a parameter as its name:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" name"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" age"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Person"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" initialName"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"age "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"name "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" initialName"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The constructor's name is always the same as the class name. The class in the example above is named Person, so the constructor will also have to be named Person. The constructor is also provided,  as a parameter, the name of the person object to be created. The parameter is enclosed in parentheses and follows the constructor's name. The parentheses that contain optional parameters are followed by curly brackets. In between these brackets is the source code that the program executes when the constructor is called (e.g., "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"new Person (\"Ada\")"}]},{"type":"text","value":")."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Objects are always created using a constructor.\nA few things to note: the constructor contains the expression "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"this.age = 0"}]},{"type":"text","value":". This expression sets the instance variable "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"age"}]},{"type":"text","value":" of the newly created object (i.e., \"this\" object's age) to 0. The second expression "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"this.name = initialName"}]},{"type":"text","value":" likewise assigns the string passed as a parameter to the instance variable "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" of the object created."}]},{"type":"element","tagName":"text-box","properties":{"variant":"hint","name":"Default Constructor"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the programmer does not define a constructor for a class, Java automatically creates a default one for it. A default constructor is a constructor that doesn't do anything apart from creating the object. The object's variables remain uninitialized (generally, the value of any object references will be "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":", meaning that they do not point to anything, and the values of primitives will be "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":")"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Methods"}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Standard objects"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For objects of standard Java classes, you can find the available methods in the "},{"type":"element","tagName":"a","properties":{"href":"https://docs.oracle.com/javase/8/docs/api/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Java Documentation"}]},{"type":"text","value":" of the API.\nOn the left, a list of all public classes is presented. If you choose the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" class, you can scroll down to the Method Summary, where all methods of the String class are described.\nFor instance, the methods length(), toLowerCase(), toUpperCase(), charAt(), split() and replaceAll() are mentioned here.\nIf you place your cursor on the word "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" at the definition of a String object and press "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Ctrl + Shift + i"}]},{"type":"text","value":" on Windows or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Cmd + Shift + i"}]},{"type":"text","value":" on Mac, you can find the implementation of all these methods in the pop-up."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Static versus Non-Static"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"TODO:"}]},{"type":"text","value":" deze uitleg kan verwarrend zijn, omdat objecten wel degelijke bij instance variabelen kunnen zolang het maar via een referentie naar een object gaat. Het punt is vooral dat er geen "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" bestaat, wat een argument zou kunnen zijn om "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" eerst uit te leggen?"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Static methods are not associated with an object and cannot access instance variables, but only static variables. A static variable belongs to a class and is global. Thus, methods in two different objects can access and change the same variable.\nInstance variables are non-static. Each object has his own copy of the instance variables. Non-static methods can access both static and non-static variables."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Objects and references"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Java, variables that do not actually hold objects, merely hold a "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"reference"}]},{"type":"text","value":" to the object, which is a location of the object within the computer's memory. When a variable contains the memory location of an object, it "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"refers"}]},{"type":"text","value":" to that object.\nFor instance, in the following code, two variables "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" refer to the same "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":" object."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" a "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\na"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" b "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" a"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\nb"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"10"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"a"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since they refer to the same object, an adjustment performed via reference "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" is also visible via reference "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":", such that now "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"[5, 10]"}]},{"type":"text","value":" will be printed.\nThis shows a clear distinction between primitive and non-primitive variables. Object variables are non-primitive and hold references. Primitive variables, however, store data, not references. In the following example, the two variables "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" and "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" can thus be adjusted separately without impacting each other."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If an object does not refer to anything at all, the object reference has the special value "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":".\nAnother used reference is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"this"}]},{"type":"text","value":". This reference is used by methods to refer to the object that the method is called on."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"TODO"}]},{"type":"text","value":": het is wellicht nog mooi iets met memory state diagrams toe te voegen aan deze sectie, of dit stukje daarmee uit te breiden?"}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You revise your knowledge on classes and objects.</li>\n<li>You understand what a constructor is, and you are able to make one yourself.</li>\n<li>You know how to use the Java Documentation and open API for existing classes and their methods.</li>\n<li>You can tell the difference between static and non-static methods.</li>\n<li>You know that most objects store references to values.</li>\n<li>You are familiar with the null and this reference.</li>\n</ul></text-box><p>Last year, you have started your journey in the world of object-oriented programming in the course Introduction to Programming. We'll shortly review the use of objects and methods.</p><h2>Revision of Classes and Objects</h2><p>A class defines the attributes of objects, i.e., the information related to them (instance variables), and their commands, i.e., their methods. The values of instance (i.e., object) variables define the internal state of an individual object, whereas methods define the functionality it offers.\nA method is a piece of code written inside a class that can be called. A method is always part of some class and is often used to modify the internal state of an object instantiated from a class.\nAn object is always instantiated by calling a method that created an object, i.e., a constructor by using the <code class=\"language-text\">new</code> keyword.</p><p>A class thus specifies what the objects instantiated from it are like.</p><ul>\n<li>The object's variables (instance variables) specify the internal state of the object.</li>\n<li>The object's methods specify what the object does.</li>\n</ul><p>If you make your own class, you should write Javadoc style comments that start with <code class=\"language-text\">/**</code> for every method in the class, but also for the class itself. Within the class Javadoc comment, you should also state who the author is, using the <code class=\"language-text\">@author</code> annotation. For public methods, you explain the use of the method, the parameters and return types.</p><!-- TODO: misschien overview week 1 slide 37 over wat objects/statements/methods zijn enzo -->.<p>Let's create a class named <code class=\"language-text\">Person</code>. For this class, we create a separate file named <code class=\"language-text\">Person.java</code>. Our program now consists of two separate files, since the main program is also in its own file. The <code class=\"language-text\">Person.java</code> file initially contains the class definition <strong>public class Person</strong> and the curly brackets that confine the contents of the class.\nA class defines the attributes and behaviors of objects that are created from it. Let's decide that each person object has a name and an age. It's natural to represent the name as a string, and the age as an integer. We'll go ahead and add these to our blueprint:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>We specify above that each object created from the <code class=\"language-text\">Person</code> class has a <code class=\"language-text\">name</code> and an <code class=\"language-text\">age</code>. Variables defined inside a class are called <em>instance variables</em>.\nInstance variables are written on the lines following the class definition <code class=\"language-text\">public class Person {</code>. Each variable is preceded by the keyword private. The keyword <strong>private</strong> means that the variables are \"hidden\" inside the object, which is known as <em>encapsulation</em>. <strong>Public</strong> variables, on the other hand, are variables that are visible from outside the class.</p><h2>Defining a Constructor</h2><p>We want to set an initial state for an object that's created. Custom objects are created the same way as objects from pre-made Java classes, such as <code class=\"language-text\">ArrayList</code>, using the <code class=\"language-text\">new</code> keyword. It'd be convenient to pass values to the variables of that object as it's being created. For example, when creating a new person object, it's useful to be able to provide it with a name:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span> ada <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ada\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>This is achieved by defining the method that creates the object, i.e., its constructor. The constructor is defined after the instance variables. In the following example, a constructor is defined for the Person class, which can be used to create a new Person object. The constructor sets the age of the object being created to 0, and the string passed to the constructor as a parameter as its name:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> initialName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> initialName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>The constructor's name is always the same as the class name. The class in the example above is named Person, so the constructor will also have to be named Person. The constructor is also provided,  as a parameter, the name of the person object to be created. The parameter is enclosed in parentheses and follows the constructor's name. The parentheses that contain optional parameters are followed by curly brackets. In between these brackets is the source code that the program executes when the constructor is called (e.g., <code class=\"language-text\">new Person (&quot;Ada&quot;)</code>).</p><p>Objects are always created using a constructor.\nA few things to note: the constructor contains the expression <code class=\"language-text\">this.age = 0</code>. This expression sets the instance variable <code class=\"language-text\">age</code> of the newly created object (i.e., \"this\" object's age) to 0. The second expression <code class=\"language-text\">this.name = initialName</code> likewise assigns the string passed as a parameter to the instance variable <code class=\"language-text\">name</code> of the object created.</p><text-box variant='hint' name='Default Constructor'><p>If the programmer does not define a constructor for a class, Java automatically creates a default one for it. A default constructor is a constructor that doesn't do anything apart from creating the object. The object's variables remain uninitialized (generally, the value of any object references will be <code class=\"language-text\">null</code>, meaning that they do not point to anything, and the values of primitives will be <code class=\"language-text\">0</code>)</p></text-box><h2>Methods</h2><h3>Standard objects</h3><p>For objects of standard Java classes, you can find the available methods in the <a href=\"https://docs.oracle.com/javase/8/docs/api/\" target=\"_blank\" rel=\"noopener noreferrer\">Java Documentation</a> of the API.\nOn the left, a list of all public classes is presented. If you choose the <code class=\"language-text\">String</code> class, you can scroll down to the Method Summary, where all methods of the String class are described.\nFor instance, the methods length(), toLowerCase(), toUpperCase(), charAt(), split() and replaceAll() are mentioned here.\nIf you place your cursor on the word <code class=\"language-text\">String</code> at the definition of a String object and press <code class=\"language-text\">Ctrl + Shift + i</code> on Windows or <code class=\"language-text\">Cmd + Shift + i</code> on Mac, you can find the implementation of all these methods in the pop-up.</p><h3>Static versus Non-Static</h3><p><strong>TODO:</strong> deze uitleg kan verwarrend zijn, omdat objecten wel degelijke bij instance variabelen kunnen zolang het maar via een referentie naar een object gaat. Het punt is vooral dat er geen <code class=\"language-text\">this</code> bestaat, wat een argument zou kunnen zijn om <code class=\"language-text\">this</code> eerst uit te leggen?</p><p>Static methods are not associated with an object and cannot access instance variables, but only static variables. A static variable belongs to a class and is global. Thus, methods in two different objects can access and change the same variable.\nInstance variables are non-static. Each object has his own copy of the instance variables. Non-static methods can access both static and non-static variables.</p><h2>Objects and references</h2><p>In Java, variables that do not actually hold objects, merely hold a <strong>reference</strong> to the object, which is a location of the object within the computer's memory. When a variable contains the memory location of an object, it <em>refers</em> to that object.\nFor instance, in the following code, two variables <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code> refer to the same <code class=\"language-text\">ArrayList</code> object.</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>Since they refer to the same object, an adjustment performed via reference <code class=\"language-text\">b</code> is also visible via reference <code class=\"language-text\">a</code>, such that now <code class=\"language-text\">[5, 10]</code> will be printed.\nThis shows a clear distinction between primitive and non-primitive variables. Object variables are non-primitive and hold references. Primitive variables, however, store data, not references. In the following example, the two variables <em>a</em> and <em>b</em> can thus be adjusted separately without impacting each other.</p><p>If an object does not refer to anything at all, the object reference has the special value <code class=\"language-text\">null</code>.\nAnother used reference is <code class=\"language-text\">this</code>. This reference is used by methods to refer to the object that the method is called on.</p><p><strong>TODO</strong>: het is wellicht nog mooi iets met memory state diagrams toe te voegen aan deze sectie, of dit stukje daarmee uit te breiden?</p></div>","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}},"allPages":{"edges":[{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"61070193-bb81-5ffe-9273-4d925cb903c4","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"9bef9515-fc84-54e8-991b-8d4b87d48498","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"805b2f4f-3ca8-5677-90af-19684fe2f1a6","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"03d10486-ab30-57f6-ae41-8a809bd25200","frontmatter":{"path":"/week1/4-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"edae41ea-32c8-5c50-9c39-da6ddd03a27d","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"9652a1f5-fbda-5444-b959-73ebf75bca19","frontmatter":{"path":"/week2/2-errors-and-exceptions","title":"Errors and Exceptions"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"86f7525b-b9b1-5729-bf09-3387e6d0b002","frontmatter":{"path":"/week2/3-reading-and-writing","title":"Reading and Writing"}}},{"node":{"id":"daa93876-246f-56ba-855f-045a3ff4fba1","frontmatter":{"path":"/week3/1-Interfaces-and-polymorphism","title":"Interfaces and polymorphism"}}},{"node":{"id":"75db0ac4-4fcd-5090-a648-695c18e91099","frontmatter":{"path":"/week3/2-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"dbddf2b6-a71c-56fd-9c56-28f0c2dfad18","frontmatter":{"path":"/week3/3-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"9d8c01bf-bc1d-58dc-b555-95c8cbd069db","frontmatter":{"path":"/week3/3-object-polymorphism","title":"Object polymorphism"}}},{"node":{"id":"c1ca89fc-9a6b-5b7a-ba89-77760926e436","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"3c77e811-0eeb-5f51-8e4b-6c358b63d2f2","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes and Methods"}}},{"node":{"id":"a2e1847d-1ad2-5654-9375-887e0c855c19","frontmatter":{"path":"/week4/3-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"fd924f9e-b6ae-5fe8-939d-8694eb394d94","frontmatter":{"path":"/week4/4-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"c95e3dba-aac0-528c-b7c3-4d84edf025d2","frontmatter":{"path":"/week5/2-generics","title":"Generics"}}},{"node":{"id":"84f70f8f-f806-5a3b-a864-a1df5308a853","frontmatter":{"path":"/week5/1-learning-object-oriented-programming","title":"Learning object-oriented programming"}}},{"node":{"id":"0b2873e9-b5f8-5af8-9ff7-dd88fc021ae9","frontmatter":{"path":"/week5/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"11f069a5-c457-5fd7-9cd4-7227298ad1ae","frontmatter":{"path":"/week5/3-method-and-constructor-overloading","title":"Removing repetitive code (overloading methods and constructors)"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"7330adaf-091b-57f5-a191-c0f5895168c3","frontmatter":{"path":"/week5/2-arraylist-and-hashtable","title":"ArrayList and hash table"}}},{"node":{"id":"b813f2eb-7615-5115-a613-c40538f0c28e","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"caee4aff-2a7d-5c51-babc-7eab7c46c1f1","frontmatter":{"path":"/week6/4-using-existing-classes","title":"Using existing classes in Java"}}},{"node":{"id":"32a45936-4034-5cc7-82e5-528447b775d3","frontmatter":{"path":"/week6/3-other-useful-techniques","title":"Other useful techniques"}}},{"node":{"id":"cef8a4de-1c16-5a6c-bea4-5058c5fd09f8","frontmatter":{"path":"/week6/1-handling-collections-as-streams","title":"Handling collections as streams"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"736fa8bc-cc96-5fbc-aecd-b62d17b3085b","frontmatter":{"path":"/week6/4-maven-and-third-party-libraries","title":"Maven and third-party libraries"}}},{"node":{"id":"829bf071-214a-53f1-8e87-531b0b6cd0c0","frontmatter":{"path":"/week7/1-packages","title":"Packages"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"cc29c79b-fb14-51a5-9bed-4ad14d32300e","frontmatter":{"path":"/week7/3-data-visualization","title":"Data visualization"}}},{"node":{"id":"6fea97f0-cbc2-5c70-b789-6f1e5660f0aa","frontmatter":{"path":"/week5/4-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"ccc3019b-98c8-5186-90e8-8c9f687ac6e3","frontmatter":{"path":"/week5/5-objects-and-references","title":"Objects and references"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"8ca04fc2-6870-5aa5-ae15-f51ed9b1f72e","frontmatter":{"path":"/week5/2-hash-map","title":"Hash Map"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}