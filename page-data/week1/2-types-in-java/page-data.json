{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week1/2-types-in-java","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know what types are."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know what primitive types are and which eight primitive types exist in Java."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You are familiar with the concept and use of converting types using casting."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know what non-primitive types are."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know what is meant with the concept of a generic type parameter."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You are familiar with some already existing Java classes that make use of generic type parameters."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You can create classes of your own that make use of generic type parameters."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Introduction to types"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since we began using lists, we have given data structures the type of the values that we want them to store. For example, a list that stores strings has been defined as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList<String>"}]},{"type":"text","value":". But why would we bother about types?"}]},{"type":"element","tagName":"programming-exercise","properties":{"name":"Which method?"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First consider the following code:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" student "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"36"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" grade "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"45"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"register"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"student"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" grade"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Is this correct code? It depends on how the register method is defined. Consider the two following options:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"register"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" grade"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" student"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"or alternatively,"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"register"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" student"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" grade"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Take a moment to think which of the two options would be the correct one."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"TODO:"}]},{"type":"text","value":" this more like a kind of quiz... perhaps it is possible to make a \"Quiz\" variant of the programming exercise?"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Unfortunately, there is no way to tell which of the two is correct! They might both be, but it depends on the actual method was implemented.\nThis is makes it very easy to introduce nasty bugs, by accidentally swapping the two.\nOf course, this would be something that we would like to avoid and "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"the best way to avoid bugs is to make them impossible."}]},{"type":"text","value":"\nLet us rewrite this code by introducing types for "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Student"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Grade"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Student"}]},{"type":"text","value":" student "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getStudent"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"36"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Grade"}]},{"type":"text","value":" grade "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getGrade"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"12"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"register"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"student"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" grade"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This way only one register method signature is valid, and the compiler will check if we provide the right parameters.\nIn the above code, we have used the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Student"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Grade"}]},{"type":"text","value":" types.\nNow, if the method signature is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public static void register(Grade grade, Student student)"}]},{"type":"text","value":" the code will not compile, but with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public static void register(Student student, Grade grade)"}]},{"type":"text","value":" it will.\nThis way, the compiler finds a mistake before we can even run the code, which saves the effort of debugging."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The use of types in Java both has advantages and disadvantages, which are listed below."}]},{"type":"element","tagName":"text-box","properties":{"title":"Advantages and Disadvantages"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Advantages"}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"A powerful type system helps to "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"prevent bugs"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Your programming environment uses types to tell you what you can do with the object."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Code becomes "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"easier to read"}]},{"type":"text","value":" when your variables have types."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Types make it easier to write "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"modular code"}]},{"type":"text","value":" since it allows for polymorphism, which we discuss later in this course."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Automated manipulation of your code by means of "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"refactoring"}]},{"type":"text","value":" becomes safer."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Disadvantages"}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"As types need to be declared, you need "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"more code"}]},{"type":"text","value":" to do the same thing."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"A decent understanding of the "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"type system"}]},{"type":"text","value":" of the language is required."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Primitive types"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Java, exactly eight primitive types exist, which you already know: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"byte"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"short"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"long"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"float"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"char"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":". Primitive types are not considered as objects and they just represent raw values.\nAll other types are non-primitive, such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" and arrays, including arrays of non-primitive types, for example "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"double []"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int [][]"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes, it is necessary to convert between types. In some cases, this can be done automatically, for example:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" number "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"233"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" sameNumber "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" number"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"//sameNumber holds 233.0 now"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This type of conversion is called "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"implicit casting"}]},{"type":"text","value":", because casting is done automatically without us telling explicitly that the compiler should cast one type to another type.\nIn the above case, this is always possible, because for every "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" value there is a corresponding "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" value. You could say that the set of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" values "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"generalizes"}]},{"type":"text","value":" the set of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" values.\nIn other cases, however, this is not possible, such as in this case:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" number "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"123.0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" sameNumber "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" number"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"//this will give an error"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this example, the compiler doesn't want to take the risk to do an automatic conversion, since some double values, such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"0.5"}]},{"type":"text","value":", do not have a corresponding "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" value."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In general, "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"automatic conversion is only possible if the conversion goes from a more specific to a more general type"}]},{"type":"text","value":". This way, the compiler saves you from "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"loss of precision"}]},{"type":"text","value":" without realizing.\nIn some cases, we may still want to convert a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" into an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" value because we know that it will work out right.\nWe can do that by "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"explicit casting"}]},{"type":"text","value":", which is basically telling the compiler to override the type system, like this:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" number "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"123.0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" sameNumber "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" number"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"//sameNumber holds 123 now"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this particular example, things will work fine. In general, "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"explicit casts"}]},{"type":"text","value":"  may produce unexpected results:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" number "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"198"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"byte"}]},{"type":"text","value":" b "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"byte"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" number"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"b"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"which will result in"}]},{"type":"element","tagName":"sample-output","properties":{},"children":[{"type":"text","value":"\n-58\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The reason for this output is that "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"byte"}]},{"type":"text","value":" values can only store numbers between "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-128"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"127"}]},{"type":"text","value":", which is insufficient to represent the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" value "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"198"}]},{"type":"text","value":".\nThis type of behavior is called an "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"overflow"}]},{"type":"text","value":". When you write an explicit cast, you should be aware of potential issues and if needed, write additional code to safeguard yourself against such unexpected behavior."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Non-Primitive Types"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All types that are not primitive types are non-primitive types. Examples of these are "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Scanner"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int[]"}]},{"type":"text","value":", and the classes you create yourself result in new non-primitive types such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Student"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Course"}]},{"type":"text","value":".\nSince Java 5 we can also construct type-of-type things like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList<String>"}]},{"type":"text","value":". The rule to determine if a type is a primitive or non-primitive type, all you need to do is check whether the type is one of the eight primitive types. If it is not, it has to be a non-primitive type."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For every primitive type there is an associated non-primitive type, spelled with an uppercase letter: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Byte"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Short"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Long"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Float"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Double"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Character"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Boolean"}]},{"type":"text","value":".\nThis is because in Java, you cannot directly insert primitive type values (numbers, characters or boolean values) into array lists. For example, you cannot form an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList<double>"}]},{"type":"text","value":".\nInstead, you must use the related non-primitive type, which is also called the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"wrapper"}]},{"type":"text","value":". To collect "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" values in an array list, you use an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList<Double>"}]},{"type":"text","value":".\nNote that the wrapper class names start with uppercase letters, and that two of them differ from the names of the corresponding primitive integer types: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Character"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Autoboxing"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For these special types that have both a primitive and non-primitive version, primitive types and their corresponding non-primitive types can be mixed. Type conversion then makes use of something called "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"autoboxing"}]},{"type":"text","value":".\nAutoboxing is the automatic conversion that the Java compiler makes between primitive types and their corresponding non-primitive types.\nFor example, converting and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" to an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" is done automatically by autoboxing. If the conversion goes the other way, it is called unboxing.\nThe Java compiler applies autoboxing when a primitive value is passed as a parameter to a method that expects its corresponding non-primitive type, or when a primitive value is assigned to a non-primitive typed variable."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consider the following example:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"evenSum"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" numbersList"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" evenNumbersSum "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" numbersList"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"%"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n      evenNumbersSum "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+="}]},{"type":"text","value":" i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" evenNumbersSum"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"  "}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the remainder "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"%"}]},{"type":"text","value":" and unary plus "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"+="}]},{"type":"text","value":" operators do not apply to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" objects. However, the compiler does not generate an error, because it unboxes the objects to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" objects at runtime."}]},{"type":"element","tagName":"text-box","properties":{"title":"Advantages of Autoboxing and Unboxing"},"children":[{"type":"text","value":"\n  * The compiler makes you write code that is easier to read, because we do not need to cast types explicitly.\n  * It also lets you use primitive and non-primitive types interchangeably, which is convenient.\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Autoboxing and unboxing also work between non-associated primitive and non-primitive types, but only one way around. For instance, conversion from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" is done automatically, but from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" to Double is not possible.\nThe second case is not possible, because the boxing conversion is exectuted first and will autobox the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" into an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":". Since it is nog possible to cast between non-primitive types, this cannot be (implicitly) casted to Double.\nThe first case, however, can be done, since the compiler would first autobox "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" into an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":", which can implicitly be casted to a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" value."}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You know what types are.</li>\n<li>You know what primitive types are and which eight primitive types exist in Java.</li>\n<li>You are familiar with the concept and use of converting types using casting.</li>\n<li>You know what non-primitive types are.</li>\n<li>You know what is meant with the concept of a generic type parameter.</li>\n<li>You are familiar with some already existing Java classes that make use of generic type parameters.</li>\n<li>You can create classes of your own that make use of generic type parameters.</li>\n</ul></text-box><h2>Introduction to types</h2><p>Since we began using lists, we have given data structures the type of the values that we want them to store. For example, a list that stores strings has been defined as <code class=\"language-text\">ArrayList&lt;String&gt;</code>. But why would we bother about types?</p><programming-exercise name=\"Which method?\"><p>First consider the following code:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> student <span class=\"token operator\">=</span> <span class=\"token number\">36</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> grade <span class=\"token operator\">=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">register</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>Is this correct code? It depends on how the register method is defined. Consider the two following options:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> grade<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre></div><p>or alternatively,</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> student<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre></div><p>Take a moment to think which of the two options would be the correct one.</p><p><strong>TODO:</strong> this more like a kind of quiz... perhaps it is possible to make a \"Quiz\" variant of the programming exercise?</p></programming-exercise><p>Unfortunately, there is no way to tell which of the two is correct! They might both be, but it depends on the actual method was implemented.\nThis is makes it very easy to introduce nasty bugs, by accidentally swapping the two.\nOf course, this would be something that we would like to avoid and <strong>the best way to avoid bugs is to make them impossible.</strong>\nLet us rewrite this code by introducing types for <code class=\"language-text\">Student</code> and <code class=\"language-text\">Grade</code>.</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token function\">getStudent</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Grade</span> grade <span class=\"token operator\">=</span> <span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">register</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>This way only one register method signature is valid, and the compiler will check if we provide the right parameters.\nIn the above code, we have used the <code class=\"language-text\">Student</code> and <code class=\"language-text\">Grade</code> types.\nNow, if the method signature is <code class=\"language-text\">public static void register(Grade grade, Student student)</code> the code will not compile, but with <code class=\"language-text\">public static void register(Student student, Grade grade)</code> it will.\nThis way, the compiler finds a mistake before we can even run the code, which saves the effort of debugging.</p><p>The use of types in Java both has advantages and disadvantages, which are listed below.</p><text-box title=\"Advantages and Disadvantages\"><p><strong>Advantages</strong></p><ul>\n<li>A powerful type system helps to <strong>prevent bugs</strong>.</li>\n<li>Your programming environment uses types to tell you what you can do with the object.</li>\n<li>Code becomes <strong>easier to read</strong> when your variables have types.</li>\n<li>Types make it easier to write <strong>modular code</strong> since it allows for polymorphism, which we discuss later in this course.</li>\n<li>Automated manipulation of your code by means of <strong>refactoring</strong> becomes safer.</li>\n</ul><p><strong>Disadvantages</strong></p><ul>\n<li>As types need to be declared, you need <strong>more code</strong> to do the same thing.</li>\n<li>A decent understanding of the <strong>type system</strong> of the language is required.</li>\n</ul></text-box><h2>Primitive types</h2><p>In Java, exactly eight primitive types exist, which you already know: <code class=\"language-text\">byte</code>, <code class=\"language-text\">short</code>, <code class=\"language-text\">int</code>, <code class=\"language-text\">long</code>, <code class=\"language-text\">float</code>, <code class=\"language-text\">double</code>, <code class=\"language-text\">char</code> and <code class=\"language-text\">boolean</code>. Primitive types are not considered as objects and they just represent raw values.\nAll other types are non-primitive, such as <code class=\"language-text\">String</code>, <code class=\"language-text\">List</code> and arrays, including arrays of non-primitive types, for example <code class=\"language-text\">double []</code> or <code class=\"language-text\">int [][]</code>.</p><p>Sometimes, it is necessary to convert between types. In some cases, this can be done automatically, for example:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">233</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> sameNumber <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">//sameNumber holds 233.0 now</span></code></pre></div><p>This type of conversion is called <strong>implicit casting</strong>, because casting is done automatically without us telling explicitly that the compiler should cast one type to another type.\nIn the above case, this is always possible, because for every <code class=\"language-text\">int</code> value there is a corresponding <code class=\"language-text\">double</code> value. You could say that the set of <code class=\"language-text\">double</code> values <em>generalizes</em> the set of <code class=\"language-text\">int</code> values.\nIn other cases, however, this is not possible, such as in this case:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> number <span class=\"token operator\">=</span> <span class=\"token number\">123.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sameNumber <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">//this will give an error</span></code></pre></div><p>In this example, the compiler doesn't want to take the risk to do an automatic conversion, since some double values, such as <code class=\"language-text\">0.5</code>, do not have a corresponding <code class=\"language-text\">int</code> value.</p><p>In general, <strong>automatic conversion is only possible if the conversion goes from a more specific to a more general type</strong>. This way, the compiler saves you from <em>loss of precision</em> without realizing.\nIn some cases, we may still want to convert a <code class=\"language-text\">double</code> into an <code class=\"language-text\">int</code> value because we know that it will work out right.\nWe can do that by <strong>explicit casting</strong>, which is basically telling the compiler to override the type system, like this:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> number <span class=\"token number\">123.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sameNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">//sameNumber holds 123 now</span></code></pre></div><p>In this particular example, things will work fine. In general, <strong>explicit casts</strong>  may produce unexpected results:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">198</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>which will result in</p><sample-output>\n-58\n</sample-output><p>The reason for this output is that <code class=\"language-text\">byte</code> values can only store numbers between <code class=\"language-text\">-128</code> and <code class=\"language-text\">127</code>, which is insufficient to represent the <code class=\"language-text\">int</code> value <code class=\"language-text\">198</code>.\nThis type of behavior is called an <em>overflow</em>. When you write an explicit cast, you should be aware of potential issues and if needed, write additional code to safeguard yourself against such unexpected behavior.</p><h2>Non-Primitive Types</h2><p>All types that are not primitive types are non-primitive types. Examples of these are <code class=\"language-text\">String</code>, <code class=\"language-text\">Scanner</code>, <code class=\"language-text\">int[]</code>, and the classes you create yourself result in new non-primitive types such as <code class=\"language-text\">Student</code> and <code class=\"language-text\">Course</code>.\nSince Java 5 we can also construct type-of-type things like <code class=\"language-text\">ArrayList&lt;String&gt;</code>. The rule to determine if a type is a primitive or non-primitive type, all you need to do is check whether the type is one of the eight primitive types. If it is not, it has to be a non-primitive type.</p><p>For every primitive type there is an associated non-primitive type, spelled with an uppercase letter: <code class=\"language-text\">Byte</code>, <code class=\"language-text\">Short</code>, <code class=\"language-text\">Integer</code>, <code class=\"language-text\">Long</code>, <code class=\"language-text\">Float</code>, <code class=\"language-text\">Double</code>, <code class=\"language-text\">Character</code>, <code class=\"language-text\">Boolean</code>.\nThis is because in Java, you cannot directly insert primitive type values (numbers, characters or boolean values) into array lists. For example, you cannot form an <code class=\"language-text\">ArrayList&lt;double&gt;</code>.\nInstead, you must use the related non-primitive type, which is also called the <em>wrapper</em>. To collect <code class=\"language-text\">double</code> values in an array list, you use an <code class=\"language-text\">ArrayList&lt;Double&gt;</code>.\nNote that the wrapper class names start with uppercase letters, and that two of them differ from the names of the corresponding primitive integer types: <code class=\"language-text\">Integer</code> and <code class=\"language-text\">Character</code>.</p><h3>Autoboxing</h3><p>For these special types that have both a primitive and non-primitive version, primitive types and their corresponding non-primitive types can be mixed. Type conversion then makes use of something called <strong>autoboxing</strong>.\nAutoboxing is the automatic conversion that the Java compiler makes between primitive types and their corresponding non-primitive types.\nFor example, converting and <code class=\"language-text\">int</code> to an <code class=\"language-text\">Integer</code> is done automatically by autoboxing. If the conversion goes the other way, it is called unboxing.\nThe Java compiler applies autoboxing when a primitive value is passed as a parameter to a method that expects its corresponding non-primitive type, or when a primitive value is assigned to a non-primitive typed variable.</p><p>Consider the following example:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">evenSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbersList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> evenNumbersSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">:</span> numbersList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      evenNumbersSum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> evenNumbersSum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>  </code></pre></div><p>Note that the remainder <code class=\"language-text\">%</code> and unary plus <code class=\"language-text\">+=</code> operators do not apply to <code class=\"language-text\">Integer</code> objects. However, the compiler does not generate an error, because it unboxes the objects to <code class=\"language-text\">int</code> objects at runtime.</p><text-box title=\"Advantages of Autoboxing and Unboxing\">\n  * The compiler makes you write code that is easier to read, because we do not need to cast types explicitly.\n  * It also lets you use primitive and non-primitive types interchangeably, which is convenient.\n</text-box><p>Autoboxing and unboxing also work between non-associated primitive and non-primitive types, but only one way around. For instance, conversion from <code class=\"language-text\">Integer</code> to <code class=\"language-text\">double</code> is done automatically, but from <code class=\"language-text\">int</code> to Double is not possible.\nThe second case is not possible, because the boxing conversion is exectuted first and will autobox the <code class=\"language-text\">int</code> into an <code class=\"language-text\">Integer</code>. Since it is nog possible to cast between non-primitive types, this cannot be (implicitly) casted to Double.\nThe first case, however, can be done, since the compiler would first autobox <code class=\"language-text\">Integer</code> into an <code class=\"language-text\">int</code>, which can implicitly be casted to a <code class=\"language-text\">double</code> value.</p></div>","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}},"allPages":{"edges":[{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"61070193-bb81-5ffe-9273-4d925cb903c4","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"9bef9515-fc84-54e8-991b-8d4b87d48498","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"805b2f4f-3ca8-5677-90af-19684fe2f1a6","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"03d10486-ab30-57f6-ae41-8a809bd25200","frontmatter":{"path":"/week1/4-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"edae41ea-32c8-5c50-9c39-da6ddd03a27d","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"9652a1f5-fbda-5444-b959-73ebf75bca19","frontmatter":{"path":"/week2/2-errors-and-exceptions","title":"Errors and Exceptions"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"86f7525b-b9b1-5729-bf09-3387e6d0b002","frontmatter":{"path":"/week2/3-reading-and-writing","title":"Reading and Writing"}}},{"node":{"id":"daa93876-246f-56ba-855f-045a3ff4fba1","frontmatter":{"path":"/week3/1-Interfaces-and-polymorphism","title":"Interfaces and polymorphism"}}},{"node":{"id":"75db0ac4-4fcd-5090-a648-695c18e91099","frontmatter":{"path":"/week3/2-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"dbddf2b6-a71c-56fd-9c56-28f0c2dfad18","frontmatter":{"path":"/week3/3-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"9d8c01bf-bc1d-58dc-b555-95c8cbd069db","frontmatter":{"path":"/week3/3-object-polymorphism","title":"Object polymorphism"}}},{"node":{"id":"3c77e811-0eeb-5f51-8e4b-6c358b63d2f2","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"c1ca89fc-9a6b-5b7a-ba89-77760926e436","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"fd924f9e-b6ae-5fe8-939d-8694eb394d94","frontmatter":{"path":"/week4/4-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"a2e1847d-1ad2-5654-9375-887e0c855c19","frontmatter":{"path":"/week4/3-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"0a57da2b-3b04-5ba0-af06-fb2b5243c2f9","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}},{"node":{"id":"d5fcf95f-5161-58d6-b943-3f6281b745b6","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"0b2873e9-b5f8-5af8-9ff7-dd88fc021ae9","frontmatter":{"path":"/week5/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"b4a29180-0c39-5ff6-95d3-de9e8cc7168e","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"8410b992-abaa-5d25-aed2-299951e44e2e","frontmatter":{"path":"/week5/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"b813f2eb-7615-5115-a613-c40538f0c28e","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"2fdbdcd1-cfe8-5358-b0ea-cddd193daa5a","frontmatter":{"path":"/week6/2-functional-interfaces-data-processing","title":"Functional Interfaces for Data Processing"}}},{"node":{"id":"e830ec0b-4d4c-5dd8-9616-d8b8abd50f52","frontmatter":{"path":"/week6/3-maven-and-third-party-libraries","title":"Maven and third-party libraries"}}},{"node":{"id":"cef8a4de-1c16-5a6c-bea4-5058c5fd09f8","frontmatter":{"path":"/week6/1-handling-collections-as-streams","title":"Handling collections as streams"}}},{"node":{"id":"51d89618-5d7b-52ac-91e0-3214b4b310aa","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"96059a86-7613-5510-b5bd-ecd25c444569","frontmatter":{"path":"/week7/2-packages","title":"Packages"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"cc29c79b-fb14-51a5-9bed-4ad14d32300e","frontmatter":{"path":"/week7/3-data-visualization","title":"Data visualization"}}},{"node":{"id":"058233ef-86d9-514a-93bc-b43c1e0aeb69","frontmatter":{"path":"/week5/4-sets-and-maps","title":"Sets and Maps"}}},{"node":{"id":"6fea97f0-cbc2-5c70-b789-6f1e5660f0aa","frontmatter":{"path":"/week5/4-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"8ca04fc2-6870-5aa5-ae15-f51ed9b1f72e","frontmatter":{"path":"/week5/2-hash-map","title":"Hash Map"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}