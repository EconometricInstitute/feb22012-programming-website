{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week1/4. Immutable objects","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know what immutable objects are."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You can create your own immutable object."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know the advantages and disadvantages of immutable objects.  "}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this section, you will learn what an immutable object is, how you can achieve immutability in Java and what are the advantages and disadvantages of these objects."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Immutable objects "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"never change their state"}]},{"type":"text","value":", so that their values cannot be changed. Thus, we do not need to copy immutable objects to prevent their state from being changed, which is a large advantage of an immutable object. A String is an example of an immutable object. When concatenating two strings, we get a new String, not altering the old string objects. Other examples are the non-primitive versions of primitive types, such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Double"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An example of an immutable object is "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BigInteger"}]},{"type":"text","value":" which allows us to do integer calculations with numbers that are too big to fit in an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"long"}]},{"type":"text","value":".\nFirst, you import it: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"import java.math.BigInteger"}]},{"type":"text","value":". Then, take a look at this example where we use it:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"/*To create an instance of BigInteger, we use a special static method valueOf, not a constructor. \nSome classes are designed this way by their programmers. **/"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"BigInteger"}]},{"type":"text","value":" a "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"BigInteger"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"valueOf"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"233"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" \n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"BigInteger"}]},{"type":"text","value":" addValue "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Biginteger"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"ValueOf"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"144"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"BigInteger"}]},{"type":"text","value":" b "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" a"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\nb"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"addValue"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"a"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"b"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The question is: what will be printed? Would you expect 233 and 377 to be printed? It may then come as a surprise that for both "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" and "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" the number 233 will be printed here. That is because of the definition of the add method for BigInteger objects, which you can find in the "},{"type":"element","tagName":"a","properties":{"href":"https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Java documentation"}]},{"type":"text","value":".\nThe method add(BigInteger val) \"returns a BigInteger whose value is (this + val).\nSo in the previous code, we computed a new value, but did not do anything with it. Lesson learned: check the return type! If we chance "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"b.add(addValue)"}]},{"type":"text","value":" into "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"b = b.add(addValue);"}]},{"type":"text","value":", it will print 233 and 377."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you want to create your own class for immutable objects, follow these simple rules:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Do not add any setter method."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Declare all fields final and private."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a field is a mutable object itself, create copies of it for getter methods."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a mutable object is passed as an argument to the constructor, it must be assigned to a variable to create a immutable copy of it. It may also be convenient to write additional constructors to facilitate the creation of new objects."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Do not write mutation methods, but write methods that compute the new state and return a new instance with that state."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Lastly, we will list the advantages and disadvantages of immutable objects here."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Advantages"}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We do not have to worry about copying them, we can pass references."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"They work similar to other often used objects, such as String."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"They are easy to use in advanced data structures that will be discussed later."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Disadvantages"}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Creating a new object every time implies we have to copy data more often."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may lose efficiency compared to very optimized mutable objects."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"In some setting it is more intuitive to change the state of an object, such as a simulated environment or a bank account."}]},{"type":"text","value":"\n"}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You know what immutable objects are.</li>\n<li>You can create your own immutable object.</li>\n<li>You know the advantages and disadvantages of immutable objects.  </li>\n</ul></text-box><p>In this section, you will learn what an immutable object is, how you can achieve immutability in Java and what are the advantages and disadvantages of these objects.</p><p>Immutable objects <strong>never change their state</strong>, so that their values cannot be changed. Thus, we do not need to copy immutable objects to prevent their state from being changed, which is a large advantage of an immutable object. A String is an example of an immutable object. When concatenating two strings, we get a new String, not altering the old string objects. Other examples are the non-primitive versions of primitive types, such as <code class=\"language-text\">Double</code> and <code class=\"language-text\">Integer</code>.</p><p>An example of an immutable object is <code class=\"language-text\">BigInteger</code> which allows us to do integer calculations with numbers that are too big to fit in an <code class=\"language-text\">int</code> or <code class=\"language-text\">long</code>.\nFirst, you import it: <code class=\"language-text\">import java.math.BigInteger</code>. Then, take a look at this example where we use it:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/*To create an instance of BigInteger, we use a special static method valueOf, not a constructor. \nSome classes are designed this way by their programmers. **/</span>\n<span class=\"token class-name\">BigInteger</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">233</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">BigInteger</span> addValue <span class=\"token operator\">=</span> <span class=\"token class-name\">Biginteger<span class=\"token punctuation\">.</span>ValueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">144</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">BigInteger</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>addValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>The question is: what will be printed? Would you expect 233 and 377 to be printed? It may then come as a surprise that for both <em>a</em> and <em>b</em> the number 233 will be printed here. That is because of the definition of the add method for BigInteger objects, which you can find in the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html\" target=\"_blank\" rel=\"noopener noreferrer\">Java documentation</a>.\nThe method add(BigInteger val) \"returns a BigInteger whose value is (this + val).\nSo in the previous code, we computed a new value, but did not do anything with it. Lesson learned: check the return type! If we chance <code class=\"language-text\">b.add(addValue)</code> into <code class=\"language-text\">b = b.add(addValue);</code>, it will print 233 and 377.</p><p>If you want to create your own class for immutable objects, follow these simple rules:</p><ul>\n<li>Do not add any setter method.</li>\n<li>Declare all fields final and private.</li>\n<li>If a field is a mutable object itself, create copies of it for getter methods.</li>\n<li>If a mutable object is passed as an argument to the constructor, it must be assigned to a variable to create a immutable copy of it. It may also be convenient to write additional constructors to facilitate the creation of new objects.</li>\n<li>Do not write mutation methods, but write methods that compute the new state and return a new instance with that state.</li>\n</ul><p>Lastly, we will list the advantages and disadvantages of immutable objects here.</p><p><strong>Advantages</strong></p><ul>\n<li>We do not have to worry about copying them, we can pass references.</li>\n<li>They work similar to other often used objects, such as String.</li>\n<li>They are easy to use in advanced data structures that will be discussed later.</li>\n</ul><p><strong>Disadvantages</strong></p><ul>\n<li>Creating a new object every time implies we have to copy data more often.</li>\n<li>You may lose efficiency compared to very optimized mutable objects.</li>\n<li>In some setting it is more intuitive to change the state of an object, such as a simulated environment or a bank account.</li>\n</ul></div>","frontmatter":{"path":"/week1/4. Immutable objects","title":"Immutable objects"}},"allPages":{"edges":[{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"8cfc1fb8-a8c3-5b87-9b58-98681cb275ab","frontmatter":{"path":"/part-10/4-summary","title":"Summary"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"d384d6c1-fbac-58b9-99b1-abf0c1f0f1fa","frontmatter":{"path":"/week-1/1. Why Java.md","title":"Why Java?"}}},{"node":{"id":"04290595-d4cb-5bf9-bae2-13b73c5fb9de","frontmatter":{"path":"/week1/2. Types in Java","title":"Types in Java"}}},{"node":{"id":"2f3856a2-0373-5a46-a217-1481387467a2","frontmatter":{"path":"/week1/3. Classes and objects in Java","title":"Classes and objects in Java"}}},{"node":{"id":"7bde4222-ef25-59c0-bd64-faa06b39a216","frontmatter":{"path":"/week1/4. Immutable objects","title":"Immutable objects"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week-1","title":"Week 1"}}},{"node":{"id":"e89645a4-ea35-58dc-8bdc-dd18ee17435b","frontmatter":{"path":"/week2/1. Random numbers","title":"Random numbers"}}},{"node":{"id":"3b9a5499-7d6b-51a8-a957-61178b7162b9","frontmatter":{"path":"/week2/3. Reading and writing","title":"Reading and Writing"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week-2","title":"Week 2"}}},{"node":{"id":"085e89a6-f3c4-5394-a0f0-7db5da6a306c","frontmatter":{"path":"/week-3/1-discovering-errors","title":"Discovering and Solving Errors"}}},{"node":{"id":"664ec03b-9b1d-5972-b9a2-0f1ae602a882","frontmatter":{"path":"/week2/2. Errors and exceptions","title":"Errors and Exceptions"}}},{"node":{"id":"b252bbb0-1e43-510e-a1db-31fa2c9f9769","frontmatter":{"path":"/week-3/3-lists","title":"Lists"}}},{"node":{"id":"8b77fa1a-03da-5ed7-9404-931433c3518b","frontmatter":{"path":"/part-9/4-summary","title":"Summary"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week-3","title":"Week 3"}}},{"node":{"id":"5fb2fa12-d07e-5dc5-b8d0-a39daf71975b","frontmatter":{"path":"/part-9/3-object-polymorphism","title":"Object polymorphism"}}},{"node":{"id":"535c8b34-0f27-5dea-a649-0161575b6ef7","frontmatter":{"path":"/part-8/3-similarity-of-objects","title":"Similarity of objects"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week-4","title":"Week 4"}}},{"node":{"id":"4ba82733-23a4-5f3c-91bc-7adf53a9a95e","frontmatter":{"path":"/part-10/2-interface-comparable","title":"The Comparable Interface"}}},{"node":{"id":"d0f0500f-11a0-5e7d-889c-48785ffd254b","frontmatter":{"path":"/week-5/2-objects-in-a-list","title":"Objects in a list"}}},{"node":{"id":"84f70f8f-f806-5a3b-a864-a1df5308a853","frontmatter":{"path":"/week-5/1-learning-object-oriented-programming","title":"Learning object-oriented programming"}}},{"node":{"id":"36bd23f8-9a37-5b70-89b3-df763d74b736","frontmatter":{"path":"/part-12/2-arraylist-and-hashtable","title":"ArrayList and hash table"}}},{"node":{"id":"ccc3019b-98c8-5186-90e8-8c9f687ac6e3","frontmatter":{"path":"/week-5/5-objects-and-references","title":"Objects and references"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week-5","title":"Week 5"}}},{"node":{"id":"b15ca86a-5fe8-50a9-b3e6-b5c32c257dca","frontmatter":{"path":"/week-6/4-using-existing-classes","title":"Using existing classes in Java"}}},{"node":{"id":"32a45936-4034-5cc7-82e5-528447b775d3","frontmatter":{"path":"/part-10/3-other-useful-techniques","title":"Other useful techniques"}}},{"node":{"id":"0bf1ec1c-7fbc-57cb-abe8-7fcea2e45f54","frontmatter":{"path":"/part-10/1-handling-collections-as-streams","title":"Handling collections as streams"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week-6","title":"Week 6"}}},{"node":{"id":"867582b5-8217-58ed-8ee7-72bec2da02d8","frontmatter":{"path":"/part-14/4-maven-and-third-party-libraries","title":"Maven and third-party libraries"}}},{"node":{"id":"50fe64c0-c2d5-5bd0-aba7-ea1278b1204d","frontmatter":{"path":"/part-11/2-packages","title":"Packages"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week-7","title":"Week 7"}}},{"node":{"id":"236a39b1-6531-52d7-b37f-e04efd3d6eee","frontmatter":{"path":"/part-14/1-data-visualization","title":"Data visualization"}}},{"node":{"id":"6fea97f0-cbc2-5c70-b789-6f1e5660f0aa","frontmatter":{"path":"/week-5/4-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"4e3c9664-bdb9-58ce-9efe-48fb5c4dc050","frontmatter":{"path":"/part-9/1-inheritance","title":"Class inheritance"}}},{"node":{"id":"a0eccee1-0072-560e-b8f4-0e8ade7311a1","frontmatter":{"path":"/part-9/2-interface","title":"Interfaces"}}},{"node":{"id":"11f069a5-c457-5fd7-9cd4-7227298ad1ae","frontmatter":{"path":"/week-5/3-method-and-constructor-overloading","title":"Removing repetitive code (overloading methods and constructors)"}}},{"node":{"id":"744cbd99-82d4-536d-8a18-31b46a47dd0c","frontmatter":{"path":"/part-8/2-hash-map","title":"Hash Map"}}},{"node":{"id":"9065b3b1-0db4-512a-923e-773ad1fd53b8","frontmatter":{"path":"/week-3/2-methods","title":"Methods and dividing the program into smaller parts"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}