{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week5/3-sets","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You will brush up on using classes and objects."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know what a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" reference is, and what causes the NullPointerException error."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You can use an object as an object variable and a method parameter."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You can create a method that returns an object."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You can create the method equals, which can be used to check if two objects of the same type have the same contents or state."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Set<E> interface"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes, we want to work with data while we do not care about the order elements were added or how often they occur. In such cases, we should use a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" instead of a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":". For example, when finding repeated values in a set of data or when keeping track of whether we have seen something before.\nSet data structures are thus different from lists. They specialize in checking efficiently whether an element is in the set. If the same element gets added multiple times, it will be in the set only once."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set&lt;E&gt;"}]},{"type":"text","value":" interface extends the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection&lt;E&gt;"}]},{"type":"text","value":" interface, but does not add any methods on top of it. It indicates there are no repeated values.\nSince a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" behaves differently from a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", we can interpret some of the operations in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection&lt;E&gt;"}]},{"type":"text","value":" interface as operations on mathematical sets:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The set union (ùëÜ ‚à™ ùëá) can be performed via the addAll method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public boolean addAll(Collection&lt;? extends E&gt; arg0);"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The set intersection (ùëÜ ‚à© ùëá) can be performed via the retainAll method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public boolean retainAll(Collection&lt;?&gt; arg0);"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The set difference (S \\ ùëá) can be performed via the removeAll method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public boolean removeAll(Collection&lt;?&gt; arg0);"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Checking for subsets (S ‚äÜ ùëá) can be done via the containsAll method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public boolean containsAll(Collection<?> arg0);"}]}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"HashSet<E> class"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to check if an element is already in the set, you could iterate over all elements in the set. But this is inefficient.\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet&lt;E&gt;"}]},{"type":"text","value":" class uses the contract between "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals()"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode()"}]},{"type":"text","value":" to find objects much faster.\nIt maintains a list of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"m"}]},{"type":"text","value":" buckets. When a new element "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"o"}]},{"type":"text","value":" is added, the it is added to the bucket with index "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"o.hashCode() % m"}]},{"type":"text","value":".\nWhen we check whether an element is already in the set, we only need to compare the element to other elements in its bucket.\nHere is a visual example of how the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" works:\n"},{"type":"element","tagName":"img","properties":{"width":683,"alt":"In the picture six buckets are depicted. Object 1 and 4 are in the first bucket, having the same Hash. Object 1 contains string aab and object 4 contains aabaab. The other buckets either contain one or zero objects, with all different hash codes and (slightly) different string elements.","src":"https://user-images.githubusercontent.com/67587903/128778160-0cd013d4-b381-441c-b1ff-8e29799d03e8.PNG"},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" has two constructors:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"public HashSet()"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"public HashSet(Collection<? extends E> c)"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the hash codes of the objects added to a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" are distributed uniformly, they will distribute nicely over the different buckets with high probability and it will be very efficient. To work properly, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" really depends on the contracts for "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode()"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals()"}]},{"type":"text","value":". Calling the contains() method on a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":" with a 10.000 elements will be a lot faster than calling it on a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", approximately 100 to 1000 times faster."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"SortedSet<E> interface"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The HashSet<E> stores it elements in a very random order, depending on the current number of buckets and the hashCodes of the objects. If there is some order available we may want to obtain all objects in the set greater than some object "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fromElement"}]},{"type":"text","value":" or smaller than some object "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toElement"}]},{"type":"text","value":".\nThe SortedSet<E> interface defines the following methods:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"E first();"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"E last();"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"SortedSet<E> headSet(E toElement);"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"SortedSet<E> tailSet(E fromElement);"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"SortedSet<E> subSet(E fromElement, E toElement);"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"TreeSet<E> class"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet&lt;E&gt;"}]},{"type":"text","value":" implements the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SortedSet&lt;E&gt;"}]},{"type":"text","value":" interface and requires some order of the elements of type E. This can be the natural order, if E implements "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparable&lt;E&gt;"}]},{"type":"text","value":", or it can be provided by passing a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparator&lt;E&gt;"}]},{"type":"text","value":" to the constructor.\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"text","value":" stores its elements in the nodes of a binary tree, such that the following properties hold at all time:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All nodes in the left subtree of the node hold smaller (or equal) elements"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All nodes in the right subtree of the node hold greater (or equal) elements"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is an example:"}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You will brush up on using classes and objects.</li>\n<li>You know what a <code class=\"language-text\">null</code> reference is, and what causes the NullPointerException error.</li>\n<li>You can use an object as an object variable and a method parameter.</li>\n<li>You can create a method that returns an object.</li>\n<li>You can create the method equals, which can be used to check if two objects of the same type have the same contents or state.</li>\n</ul></text-box><h2>Set&#x3C;E> interface</h2><p>Sometimes, we want to work with data while we do not care about the order elements were added or how often they occur. In such cases, we should use a <code class=\"language-text\">Set</code> instead of a <code class=\"language-text\">List</code>. For example, when finding repeated values in a set of data or when keeping track of whether we have seen something before.\nSet data structures are thus different from lists. They specialize in checking efficiently whether an element is in the set. If the same element gets added multiple times, it will be in the set only once.</p><p>The <code class=\"language-text\">Set&amp;lt;E&amp;gt;</code> interface extends the <code class=\"language-text\">Collection&amp;lt;E&amp;gt;</code> interface, but does not add any methods on top of it. It indicates there are no repeated values.\nSince a <code class=\"language-text\">Set</code> behaves differently from a <code class=\"language-text\">List</code>, we can interpret some of the operations in the <code class=\"language-text\">Collection&amp;lt;E&amp;gt;</code> interface as operations on mathematical sets:</p><ul>\n<li>The set union (ùëÜ ‚à™ ùëá) can be performed via the addAll method: <code class=\"language-text\">public boolean addAll(Collection&amp;lt;? extends E&amp;gt; arg0);</code></li>\n<li>The set intersection (ùëÜ ‚à© ùëá) can be performed via the retainAll method: <code class=\"language-text\">public boolean retainAll(Collection&amp;lt;?&amp;gt; arg0);</code></li>\n<li>The set difference (S \\ ùëá) can be performed via the removeAll method: <code class=\"language-text\">public boolean removeAll(Collection&amp;lt;?&amp;gt; arg0);</code></li>\n<li>Checking for subsets (S ‚äÜ ùëá) can be done via the containsAll method: <code class=\"language-text\">public boolean containsAll(Collection&lt;?&gt; arg0);</code></li>\n</ul><h3>HashSet&#x3C;E> class</h3><p>In order to check if an element is already in the set, you could iterate over all elements in the set. But this is inefficient.\nThe <code class=\"language-text\">HashSet&amp;lt;E&amp;gt;</code> class uses the contract between <code class=\"language-text\">equals()</code> and <code class=\"language-text\">hashCode()</code> to find objects much faster.\nIt maintains a list of <em>m</em> buckets. When a new element <em>o</em> is added, the it is added to the bucket with index <code class=\"language-text\">o.hashCode() % m</code>.\nWhen we check whether an element is already in the set, we only need to compare the element to other elements in its bucket.\nHere is a visual example of how the <code class=\"language-text\">HashSet</code> works:\n<img width=\"683\" alt=\"In the picture six buckets are depicted. Object 1 and 4 are in the first bucket, having the same Hash. Object 1 contains string aab and object 4 contains aabaab. The other buckets either contain one or zero objects, with all different hash codes and (slightly) different string elements.\" src=\"https://user-images.githubusercontent.com/67587903/128778160-0cd013d4-b381-441c-b1ff-8e29799d03e8.PNG\"></p><p>The <code class=\"language-text\">HashSet</code> has two constructors:</p><ul>\n<li>public HashSet()</li>\n<li>public HashSet(Collection&#x3C;? extends E> c)</li>\n</ul><p>If the hash codes of the objects added to a <code class=\"language-text\">HashSet</code> are distributed uniformly, they will distribute nicely over the different buckets with high probability and it will be very efficient. To work properly, <code class=\"language-text\">HashSet</code> really depends on the contracts for <code class=\"language-text\">hashCode()</code> and <code class=\"language-text\">equals()</code>. Calling the contains() method on a <code class=\"language-text\">HashSet</code> with a 10.000 elements will be a lot faster than calling it on a <code class=\"language-text\">List</code>, approximately 100 to 1000 times faster.</p><h2>SortedSet&#x3C;E> interface</h2><p>The HashSet&#x3C;E> stores it elements in a very random order, depending on the current number of buckets and the hashCodes of the objects. If there is some order available we may want to obtain all objects in the set greater than some object <code class=\"language-text\">fromElement</code> or smaller than some object <code class=\"language-text\">toElement</code>.\nThe SortedSet&#x3C;E> interface defines the following methods:</p><ul>\n<li>E first();</li>\n<li>E last();</li>\n<li>SortedSet&#x3C;E> headSet(E toElement);</li>\n<li>SortedSet&#x3C;E> tailSet(E fromElement);</li>\n<li>SortedSet&#x3C;E> subSet(E fromElement, E toElement);</li>\n</ul><h3>TreeSet&#x3C;E> class</h3><p><code class=\"language-text\">TreeSet&amp;lt;E&amp;gt;</code> implements the <code class=\"language-text\">SortedSet&amp;lt;E&amp;gt;</code> interface and requires some order of the elements of type E. This can be the natural order, if E implements <code class=\"language-text\">Comparable&amp;lt;E&amp;gt;</code>, or it can be provided by passing a <code class=\"language-text\">Comparator&amp;lt;E&amp;gt;</code> to the constructor.\nThe <code class=\"language-text\">TreeSet</code> stores its elements in the nodes of a binary tree, such that the following properties hold at all time:</p><ul>\n<li>All nodes in the left subtree of the node hold smaller (or equal) elements</li>\n<li>All nodes in the right subtree of the node hold greater (or equal) elements</li>\n</ul><p>Here is an example:</p></div>","frontmatter":{"path":"/week5/3-sets","title":"Sets"}},"allPages":{"edges":[{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"61070193-bb81-5ffe-9273-4d925cb903c4","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"9bef9515-fc84-54e8-991b-8d4b87d48498","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"805b2f4f-3ca8-5677-90af-19684fe2f1a6","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"03d10486-ab30-57f6-ae41-8a809bd25200","frontmatter":{"path":"/week1/4-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"edae41ea-32c8-5c50-9c39-da6ddd03a27d","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"9652a1f5-fbda-5444-b959-73ebf75bca19","frontmatter":{"path":"/week2/2-errors-and-exceptions","title":"Errors and Exceptions"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"86f7525b-b9b1-5729-bf09-3387e6d0b002","frontmatter":{"path":"/week2/3-reading-and-writing","title":"Reading and Writing"}}},{"node":{"id":"daa93876-246f-56ba-855f-045a3ff4fba1","frontmatter":{"path":"/week3/1-Interfaces-and-polymorphism","title":"Interfaces and polymorphism"}}},{"node":{"id":"75db0ac4-4fcd-5090-a648-695c18e91099","frontmatter":{"path":"/week3/2-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"dbddf2b6-a71c-56fd-9c56-28f0c2dfad18","frontmatter":{"path":"/week3/3-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"9d8c01bf-bc1d-58dc-b555-95c8cbd069db","frontmatter":{"path":"/week3/3-object-polymorphism","title":"Object polymorphism"}}},{"node":{"id":"3c77e811-0eeb-5f51-8e4b-6c358b63d2f2","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes and Methods"}}},{"node":{"id":"c1ca89fc-9a6b-5b7a-ba89-77760926e436","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"a2e1847d-1ad2-5654-9375-887e0c855c19","frontmatter":{"path":"/week4/3-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"fd924f9e-b6ae-5fe8-939d-8694eb394d94","frontmatter":{"path":"/week4/4-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"50cb92d8-b046-51c9-a386-97f15d0b4fa2","frontmatter":{"path":"/week5/1-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"c95e3dba-aac0-528c-b7c3-4d84edf025d2","frontmatter":{"path":"/week5/2-generics","title":"Generics"}}},{"node":{"id":"7330adaf-091b-57f5-a191-c0f5895168c3","frontmatter":{"path":"/week5/2-lists-and-queues","title":"Removing repetitive code (overloading methods and constructors)"}}},{"node":{"id":"0b2873e9-b5f8-5af8-9ff7-dd88fc021ae9","frontmatter":{"path":"/week5/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"b813f2eb-7615-5115-a613-c40538f0c28e","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"8410b992-abaa-5d25-aed2-299951e44e2e","frontmatter":{"path":"/week5/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"caee4aff-2a7d-5c51-babc-7eab7c46c1f1","frontmatter":{"path":"/week6/4-using-existing-classes","title":"Using existing classes in Java"}}},{"node":{"id":"32a45936-4034-5cc7-82e5-528447b775d3","frontmatter":{"path":"/week6/3-other-useful-techniques","title":"Other useful techniques"}}},{"node":{"id":"cef8a4de-1c16-5a6c-bea4-5058c5fd09f8","frontmatter":{"path":"/week6/1-handling-collections-as-streams","title":"Handling collections as streams"}}},{"node":{"id":"736fa8bc-cc96-5fbc-aecd-b62d17b3085b","frontmatter":{"path":"/week6/4-maven-and-third-party-libraries","title":"Maven and third-party libraries"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"829bf071-214a-53f1-8e87-531b0b6cd0c0","frontmatter":{"path":"/week7/1-packages","title":"Packages"}}},{"node":{"id":"cc29c79b-fb14-51a5-9bed-4ad14d32300e","frontmatter":{"path":"/week7/3-data-visualization","title":"Data visualization"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"c1c8967c-0f67-505e-b571-0ecdb67940b1","frontmatter":{"path":"/week5/3-sets","title":"Sets"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"6fea97f0-cbc2-5c70-b789-6f1e5660f0aa","frontmatter":{"path":"/week5/4-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"8ca04fc2-6870-5aa5-ae15-f51ed9b1f72e","frontmatter":{"path":"/week5/2-hash-map","title":"Hash Map"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}