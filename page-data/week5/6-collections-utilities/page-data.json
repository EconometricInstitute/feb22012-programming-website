{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week5/6-collections-utilities","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You are aware of the utility methods in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collections"}]},{"type":"text","value":" class that can help you deal with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" objects"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before starting this last paragraph, let us first test our knowledge of what we have learned so far."}]},{"type":"element","tagName":"exercise","properties":{"title":"Test your knowledge"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this quiz, you can test your knowledge on the subjects covered in this chapter."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What is the difference between a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" and a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" object?"}]},{"type":"element","tagName":"solution","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", we store items in an order, and preserve the order. We can iterate through the list by index. In a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":", however, we also store items, but without keeping track of any order.\nAnother difference is that an item might occur twice in a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", but in a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" each item can occur at most once."}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What is a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Map"}]},{"type":"text","value":"?"}]},{"type":"element","tagName":"solution","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Map"}]},{"type":"text","value":" is a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface that provides data structures to store pairs of things. Each pair has a "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"key"}]},{"type":"text","value":" and a "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"value"}]},{"type":"text","value":". For each key, a certain value is stored. This means that each key may occur only once, as otherwise it would not be clear which key the program should return the value of.\nThe values, on the other hand, may occur multiple times, as different keys can hold the same value.\nThe most commonly used "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Map"}]},{"type":"text","value":" is the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashMap"}]},{"type":"text","value":"."}]}]}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Collections class"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Java contains a number of classes that provide handy, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" utility methods. Example of this you may have see before are\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Math"}]},{"type":"text","value":", using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Math.pow()"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Math.sin()"}]},{"type":"text","value":", or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Arrays"}]},{"type":"text","value":", using "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Arrays.toString()"}]},{"type":"text","value":" to convert an array to a string you can\nprint conveniently."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There is a similar class with useful utility methods that can be used to deal with all kinds of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" objects."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some useful methods for List types:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Comparable"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"super"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"sort"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" list"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"sort"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" list"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"super"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" c"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"reverse"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" list"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"shuffle"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" list"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Random"}]},{"type":"text","value":" rnd"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sort"}]},{"type":"text","value":" method has been discussed last week, and can be used to sort a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":",\neither by relying on the natural order of an object, or specifying a custom order\nby providing a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"text","value":" as a second argument. We can also reverse the order of\nthe list, or randomize the order of the elements by using a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Random"}]},{"type":"text","value":" object with\nthe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"shuffle"}]},{"type":"text","value":" method, which randomizes the order like you would shuffle a deck of\ncards."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The are also a number of useful methods for very basic statistics:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"max"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" coll"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"super"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" comp"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"min"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" coll"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"super"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" comp"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"frequency"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" c"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" o"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can find the minimum or maximum value in any "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" (so this works for\nboth "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" objects) according to an order specified by a given "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"text","value":"\nwith the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"min"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"max"}]},{"type":"text","value":" methods. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"frequency"}]},{"type":"text","value":" method can be used to determine\nhow often a certain element appeart in a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":", which will work on a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":"\nand a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", even though a typical "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" will contain an element at most once."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we want to return a version of a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Map"}]},{"type":"text","value":" that cannot be modified (and we don’t want to copy it),\nthere are helper methods that wrap the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Map"}]},{"type":"text","value":" in a so-called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"proxy"}]},{"type":"text","value":" that will\nthrow an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Exception"}]},{"type":"text","value":" as soon as you call any mutator method on it, but which can still be used\nto read the data from the data structure."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Set"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"unmodifiableSet"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Set"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" s"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"unmodifiableList"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"T"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" list"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"K"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"V"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Map"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"K"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"V"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"unmodifiableMap"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Map"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"K"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"V"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" m"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With these methods, we have a very powerful and flexible toolkit to handle large collections\nof objects."}]},{"type":"element","tagName":"exercise","properties":{"title":"Test your knowledge"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this quiz, you can test your knowledge on the subjects covered in this chapter."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What is the difference between the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" and the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collections"}]},{"type":"text","value":" type?"}]},{"type":"element","tagName":"solution","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" is an interface that is a subtype of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" interface and super-type\nof the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" interfaces. It has therefore a central role in the Collections\nframework, and defines important methods such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"add"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"size"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"contains"}]},{"type":"text","value":", etcetera."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collections"}]},{"type":"text","value":" is a utility class with "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"static"}]},{"type":"text","value":" helper methods, very much like the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Math"}]},{"type":"text","value":"\nclass. We thus never use the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collections"}]},{"type":"text","value":" type, but use it to compute the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"min"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"max"}]},{"type":"text","value":"\nof an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":"."}]}]},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Suppose you have a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set<String> documents"}]},{"type":"text","value":" and a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List<Integer> numbers"}]},{"type":"text","value":". You want to compute\nthe first and last documents from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"documents"}]},{"type":"text","value":" according to their alphabetical order, and the\nsmallest and greatest number in "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"numbers"}]},{"type":"text","value":". Can you do this without writing a loop yourself?"}]},{"type":"element","tagName":"solution","properties":{},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" firstDocument "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collections"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"min"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"documents"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" lastDocument "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collections"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"max"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"documents"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" smallest "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collections"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"min"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"numbers"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" greatest "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collections"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"max"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"numbers"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]}]},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that you have seen the different collection types, determine for each of the following use cases\nwhich data structure (e.g. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"LinkedList"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashMap"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeMap"}]},{"type":"text","value":")\nyou would prefer to use.."}]},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You have set of unique specimens, each with an unique numerical identifier. You want to be able to keep tracks of which specimens were involved in various experiments, but do not care about the order or frequency of occurrence. You also want to be able to access a subset from those specimens within a certain of ID's."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"There is an interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"EventType"}]},{"type":"text","value":" with different classes implementing this interface. You want to keep track how often each "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"EventType"}]},{"type":"text","value":" occurs during a simulation. There is no natural order of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"EventType"}]},{"type":"text","value":" objects available."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You need to analyze the history of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Product"}]},{"type":"text","value":" objects that are viewed by a user of your store's website. The order of the products that were visited is important and you need to have quick access to products at various locations in the list."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You want to keep track of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Task"}]},{"type":"text","value":" objects that represent work you still need to perform in a first-in first-out order. After a task is completed, you want to remove it, and when a new task comes up you want to add it."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You want to associate the names of different persons with those persons' phone numbers. Preferably, you want to have the person's names in alphabetical order when you print them."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You write an algorithm that wants to visit all "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Location"}]},{"type":"text","value":" objects in a certain "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Environment"}]},{"type":"text","value":". While exploring, you want to keep track of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Location"}]},{"type":"text","value":" objects you have visited at least once. No natural order of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Location"}]},{"type":"text","value":" objects is available."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"solution","properties":{},"children":[{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Here, a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet<Integer>"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet<Long>"}]},{"type":"text","value":" could be appropriate, as these support selecting a sub-range of ID's. Furthermore, they keep only track of unique occurrences which is sufficient for this use case."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Here a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashMap<EventType,Integer>"}]},{"type":"text","value":" is appropriate. The event types are the keys, and the values correspond to the currently held counts. When a new event is observed, the count can be updated in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashMap"}]},{"type":"text","value":". A "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeMap"}]},{"type":"text","value":" is not appropriate since we can not easily get an order of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"EventType"}]},{"type":"text","value":" objects."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Since order is important, we should use a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List<Product>"}]},{"type":"text","value":". In this particular case, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList<Product>"}]},{"type":"text","value":" is most appropriate, since quick access of elements at different indices is desired."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Since we want to maintain a first-in first-out order, and we only need to add and remove from the two ends, a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Deque"}]},{"type":"text","value":" is appropriate. Thus, a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"LinkedList<Task>"}]},{"type":"text","value":" is the only option we can select."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"To associate two types of objects, it makes sense to use a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Map"}]},{"type":"text","value":". In this case, a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Map<String,String>"}]},{"type":"text","value":" is best to link names to phone numbers (which could contain non-numerical symbols). As we prefer to have the names of the persons (keys) in alphabetical order, it makes sense to work with a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeMap<String,String>"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"As we only need to keep track of visited location objects, we should use a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":". A "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"HashSet<Location>"}]},{"type":"text","value":" is most appropriate. As we do not have an order available, it is more difficult to work with a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"TreeSet<Location>"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]}]}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You are aware of the utility methods in the <code class=\"language-text\">Collections</code> class that can help you deal with <code class=\"language-text\">Collection</code> objects</li>\n</ul></text-box><p>Before starting this last paragraph, let us first test our knowledge of what we have learned so far.</p><Exercise title=\"Test your knowledge\"><p>In this quiz, you can test your knowledge on the subjects covered in this chapter.</p><p>What is the difference between a <code class=\"language-text\">List</code> and a <code class=\"language-text\">Set</code> object?</p><Solution><p>In a <code class=\"language-text\">List</code>, we store items in an order, and preserve the order. We can iterate through the list by index. In a <code class=\"language-text\">Set</code>, however, we also store items, but without keeping track of any order.\nAnother difference is that an item might occur twice in a <code class=\"language-text\">List</code>, but in a <code class=\"language-text\">Set</code> each item can occur at most once.</p></Solution><p>What is a <code class=\"language-text\">Map</code>?</p><Solution><p>A <code class=\"language-text\">Map</code> is a <code class=\"language-text\">Collection</code> interface that provides data structures to store pairs of things. Each pair has a <strong>key</strong> and a <strong>value</strong>. For each key, a certain value is stored. This means that each key may occur only once, as otherwise it would not be clear which key the program should return the value of.\nThe values, on the other hand, may occur multiple times, as different keys can hold the same value.\nThe most commonly used <code class=\"language-text\">Map</code> is the <code class=\"language-text\">HashMap</code>.</p></Solution></Exercise><h3>Collections class</h3><p>Java contains a number of classes that provide handy, <code class=\"language-text\">static</code> utility methods. Example of this you may have see before are\n<code class=\"language-text\">Math</code>, using <code class=\"language-text\">Math.pow()</code> or <code class=\"language-text\">Math.sin()</code>, or <code class=\"language-text\">Arrays</code>, using <code class=\"language-text\">Arrays.toString()</code> to convert an array to a string you can\nprint conveniently.</p><p>There is a similar class with useful utility methods that can be used to deal with all kinds of <code class=\"language-text\">Collection</code> objects.</p><p>Some useful methods for List types:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Random</span> rnd<span class=\"token punctuation\">)</span></code></pre></div><p>The <code class=\"language-text\">sort</code> method has been discussed last week, and can be used to sort a <code class=\"language-text\">List</code>,\neither by relying on the natural order of an object, or specifying a custom order\nby providing a <code class=\"language-text\">Comparator</code> as a second argument. We can also reverse the order of\nthe list, or randomize the order of the elements by using a <code class=\"language-text\">Random</code> object with\nthe <code class=\"language-text\">shuffle</code> method, which randomizes the order like you would shuffle a deck of\ncards.</p><p>The are also a number of useful methods for very basic statistics:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> coll<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> comp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> coll<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> comp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">frequency</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span></code></pre></div><p>We can find the minimum or maximum value in any <code class=\"language-text\">Collection</code> (so this works for\nboth <code class=\"language-text\">Set</code> and <code class=\"language-text\">List</code> objects) according to an order specified by a given <code class=\"language-text\">Comparator</code>\nwith the <code class=\"language-text\">min</code> and <code class=\"language-text\">max</code> methods. The <code class=\"language-text\">frequency</code> method can be used to determine\nhow often a certain element appeart in a <code class=\"language-text\">Collection</code>, which will work on a <code class=\"language-text\">Set</code>\nand a <code class=\"language-text\">List</code>, even though a typical <code class=\"language-text\">Set</code> will contain an element at most once.</p><p>If we want to return a version of a <code class=\"language-text\">List</code>, <code class=\"language-text\">Set</code> or <code class=\"language-text\">Map</code> that cannot be modified (and we don’t want to copy it),\nthere are helper methods that wrap the <code class=\"language-text\">List</code>, <code class=\"language-text\">Set</code> or <code class=\"language-text\">Map</code> in a so-called <em>proxy</em> that will\nthrow an <code class=\"language-text\">Exception</code> as soon as you call any mutator method on it, but which can still be used\nto read the data from the data structure.</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">unmodifiableSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">unmodifiableList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">unmodifiableMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> m<span class=\"token punctuation\">)</span></code></pre></div><p>With these methods, we have a very powerful and flexible toolkit to handle large collections\nof objects.</p><Exercise title=\"Test your knowledge\"><p>In this quiz, you can test your knowledge on the subjects covered in this chapter.</p><p>What is the difference between the <code class=\"language-text\">Collection</code> and the <code class=\"language-text\">Collections</code> type?</p><Solution><p><code class=\"language-text\">Collection</code> is an interface that is a subtype of the <code class=\"language-text\">Iterable</code> interface and super-type\nof the <code class=\"language-text\">List</code> and <code class=\"language-text\">Set</code> interfaces. It has therefore a central role in the Collections\nframework, and defines important methods such as <code class=\"language-text\">add</code>, <code class=\"language-text\">size</code>, <code class=\"language-text\">contains</code>, etcetera.</p><p><code class=\"language-text\">Collections</code> is a utility class with <em>static</em> helper methods, very much like the <code class=\"language-text\">Math</code>\nclass. We thus never use the <code class=\"language-text\">Collections</code> type, but use it to compute the <code class=\"language-text\">min</code> or <code class=\"language-text\">max</code>\nof an <code class=\"language-text\">Collection</code>.</p></Solution><hr><p>Suppose you have a <code class=\"language-text\">Set&lt;String&gt; documents</code> and a <code class=\"language-text\">List&lt;Integer&gt; numbers</code>. You want to compute\nthe first and last documents from <code class=\"language-text\">documents</code> according to their alphabetical order, and the\nsmallest and greatest number in <code class=\"language-text\">numbers</code>. Can you do this without writing a loop yourself?</p><Solution><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> firstDocument <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>documents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> lastDocument <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>documents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> smallest <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Integer</span> greatest <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></Solution><hr><p>Now that you have seen the different collection types, determine for each of the following use cases\nwhich data structure (e.g. <code class=\"language-text\">LinkedList</code>, <code class=\"language-text\">ArrayList</code>, <code class=\"language-text\">HashSet</code>, <code class=\"language-text\">TreeSet</code>, <code class=\"language-text\">HashMap</code> or <code class=\"language-text\">TreeMap</code>)\nyou would prefer to use..</p><ol>\n<li>You have set of unique specimens, each with an unique numerical identifier. You want to be able to keep tracks of which specimens were involved in various experiments, but do not care about the order or frequency of occurrence. You also want to be able to access a subset from those specimens within a certain of ID's.</li>\n<li>There is an interface <code class=\"language-text\">EventType</code> with different classes implementing this interface. You want to keep track how often each <code class=\"language-text\">EventType</code> occurs during a simulation. There is no natural order of <code class=\"language-text\">EventType</code> objects available.</li>\n<li>You need to analyze the history of <code class=\"language-text\">Product</code> objects that are viewed by a user of your store's website. The order of the products that were visited is important and you need to have quick access to products at various locations in the list.</li>\n<li>You want to keep track of <code class=\"language-text\">Task</code> objects that represent work you still need to perform in a first-in first-out order. After a task is completed, you want to remove it, and when a new task comes up you want to add it.</li>\n<li>You want to associate the names of different persons with those persons' phone numbers. Preferably, you want to have the person's names in alphabetical order when you print them.</li>\n<li>You write an algorithm that wants to visit all <code class=\"language-text\">Location</code> objects in a certain <code class=\"language-text\">Environment</code>. While exploring, you want to keep track of <code class=\"language-text\">Location</code> objects you have visited at least once. No natural order of <code class=\"language-text\">Location</code> objects is available.</li>\n</ol><Solution><ol>\n<li>Here, a <code class=\"language-text\">TreeSet&lt;Integer&gt;</code> or <code class=\"language-text\">TreeSet&lt;Long&gt;</code> could be appropriate, as these support selecting a sub-range of ID's. Furthermore, they keep only track of unique occurrences which is sufficient for this use case.</li>\n<li>Here a <code class=\"language-text\">HashMap&lt;EventType,Integer&gt;</code> is appropriate. The event types are the keys, and the values correspond to the currently held counts. When a new event is observed, the count can be updated in the <code class=\"language-text\">HashMap</code>. A <code class=\"language-text\">TreeMap</code> is not appropriate since we can not easily get an order of the <code class=\"language-text\">EventType</code> objects.</li>\n<li>Since order is important, we should use a <code class=\"language-text\">List&lt;Product&gt;</code>. In this particular case, the <code class=\"language-text\">ArrayList&lt;Product&gt;</code> is most appropriate, since quick access of elements at different indices is desired.</li>\n<li>Since we want to maintain a first-in first-out order, and we only need to add and remove from the two ends, a <code class=\"language-text\">Deque</code> is appropriate. Thus, a <code class=\"language-text\">LinkedList&lt;Task&gt;</code> is the only option we can select.</li>\n<li>To associate two types of objects, it makes sense to use a <code class=\"language-text\">Map</code>. In this case, a <code class=\"language-text\">Map&lt;String,String&gt;</code> is best to link names to phone numbers (which could contain non-numerical symbols). As we prefer to have the names of the persons (keys) in alphabetical order, it makes sense to work with a <code class=\"language-text\">TreeMap&lt;String,String&gt;</code>.</li>\n<li>As we only need to keep track of visited location objects, we should use a <code class=\"language-text\">Set</code>. A <code class=\"language-text\">HashSet&lt;Location&gt;</code> is most appropriate. As we do not have an order available, it is more difficult to work with a <code class=\"language-text\">TreeSet&lt;Location&gt;</code>.</li>\n</ol></Solution></Exercise></div>","frontmatter":{"path":"/week5/6-collections-utilities","title":"Collection interfaces","ready":true,"extra":null}},"allPages":{"edges":[{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"6b175f02-c26b-5d01-a0b8-d4ba59735fb9","frontmatter":{"path":"/sessions-and-support-old","title":"Sessions and support (old)"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"61070193-bb81-5ffe-9273-4d925cb903c4","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"9bef9515-fc84-54e8-991b-8d4b87d48498","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"805b2f4f-3ca8-5677-90af-19684fe2f1a6","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"50297e53-5573-59d3-b552-033d1f2fd2e9","frontmatter":{"path":"/week1/4-intro-generic-types","title":"Introduction to Generic Types"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"c702f4c0-c5b6-59f9-ac7b-c4b7fb6c25e4","frontmatter":{"path":"/week1/5-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"edae41ea-32c8-5c50-9c39-da6ddd03a27d","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"8e0cdb60-a2f4-57a4-acfa-b0ff35995cd5","frontmatter":{"path":"/week2/2-programming-errors","title":"Programming Errors"}}},{"node":{"id":"7d1738cf-5cc8-54c0-bd95-de3364860b04","frontmatter":{"path":"/week2/4-reading-and-writing","title":"Reading and Writing Files"}}},{"node":{"id":"9dd2beba-08c6-5bc3-9935-f1e987cceb11","frontmatter":{"path":"/week2/3-exception-mechanism","title":"The Exception Mechanism"}}},{"node":{"id":"90da93f1-3687-50c0-a0dd-52c81beb6205","frontmatter":{"path":"/week2/6-character encoding","title":"Background: Character Encodings"}}},{"node":{"id":"3ed5cf79-1f3d-5ef9-ba9d-3ca30621ddd7","frontmatter":{"path":"/week2/5-introduction-interfaces","title":"Introduction to Interfaces"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"f2110b31-feb0-527c-9da1-ff1d25fa6184","frontmatter":{"path":"/week3/1-interface-types","title":"Interface Types"}}},{"node":{"id":"ff24676e-fee0-5e80-a6f4-1399135a52a1","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance"}}},{"node":{"id":"d192e5ce-00a6-5835-89fc-9da18ff13927","frontmatter":{"path":"/week3/3-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"1ac11547-1233-5527-b73d-115965177338","frontmatter":{"path":"/week3/4-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"600cbcc7-1e65-5151-b1b2-19dac31ffec9","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass"}}},{"node":{"id":"5843833b-2849-5e09-a878-040476d9e917","frontmatter":{"path":"/week3/6-when-to-use-inheritance","title":"When to use inheritance"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"3c77e811-0eeb-5f51-8e4b-6c358b63d2f2","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"c1ca89fc-9a6b-5b7a-ba89-77760926e436","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class Hierarchies"}}},{"node":{"id":"e8f09b63-9d9f-56e9-bdd9-d15af6ea61b5","frontmatter":{"path":"/week4/3-exception-class-hierarchy","title":"The Exception Class Hierarchy"}}},{"node":{"id":"6bad53a2-3301-5fe6-ab8e-dfedf5efcc00","frontmatter":{"path":"/week4/4-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"c4174d8b-8002-5dcc-b22d-13c554af05d1","frontmatter":{"path":"/week4/5-equals-and-hashcode","title":"Equals and Hashcode"}}},{"node":{"id":"d5fcf95f-5161-58d6-b943-3f6281b745b6","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"b4a29180-0c39-5ff6-95d3-de9e8cc7168e","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"07f0b811-db54-50c5-b1a9-8f1ec669dd98","frontmatter":{"path":"/week5/4-sets","title":"Sets"}}},{"node":{"id":"700b4e9e-1d74-51e9-9c45-e21c370e478d","frontmatter":{"path":"/week5/5-maps","title":"Maps"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"059db9fd-242a-51a2-889e-635052a23e12","frontmatter":{"path":"/week5/6-collections-utilities","title":"Collection interfaces"}}},{"node":{"id":"e47cc568-8f5d-5ac3-b4ad-cdc9cd69c491","frontmatter":{"path":"/week5-old/1-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"95126e2a-9163-5c18-91da-327f10b361d6","frontmatter":{"path":"/week5-old/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"3443e6a1-3b94-5ba3-bd1f-bffcea31c570","frontmatter":{"path":"/week5-old/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"7597a4ef-1156-5cc2-a090-76f7b538facd","frontmatter":{"path":"/week5-old","title":"Week 5 Old"}}},{"node":{"id":"b813f2eb-7615-5115-a613-c40538f0c28e","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"59df04c6-60a3-5041-a349-1e49bbf496bb","frontmatter":{"path":"/week6/2-functional-interfaces","title":"Functional Interfaces"}}},{"node":{"id":"586a0938-cc39-592b-8002-6e5fefa44ee1","frontmatter":{"path":"/week6/3-method-references","title":"Method References"}}},{"node":{"id":"641cfd04-517f-5bfe-8c5b-a39bdcba80ff","frontmatter":{"path":"/week6/5-data-processing-pipelines","title":"Data Processing Pipelines"}}},{"node":{"id":"6900ae8c-40db-5565-a8e2-0ed0ca217fb9","frontmatter":{"path":"/week6/4-default-methods","title":"Default methods and Shorter Comparators"}}},{"node":{"id":"05f3f556-5206-5097-b26e-b74000dcfb91","frontmatter":{"path":"/week6/6-stream-intermediate","title":"Streams: Introduction and Intermediate Operations"}}},{"node":{"id":"bb066ac2-1f33-5fad-b208-9df448371b2a","frontmatter":{"path":"/week6/7-streams-terminal","title":"Streams: Terminal Operations"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"b2dab7e9-ead6-5b4c-9f76-22a5c63bfa44","frontmatter":{"path":"/week6/8-packages-libraries-maven","title":"Packages, Libraries and Maven"}}},{"node":{"id":"3d5e1c69-07c2-5252-b0c8-f8dea40e314f","frontmatter":{"path":"/week6-old","title":"Week 6 (Old)"}}},{"node":{"id":"69b42037-a4ed-56c4-815f-c9eed53d01cd","frontmatter":{"path":"/week6-old/1-finnish-mooc","title":"Handling collections as streams and Libraries"}}},{"node":{"id":"df2868a1-d42b-559a-b780-e5a41908823f","frontmatter":{"path":"/week7/2-java-new-features","title":"Java: new Features"}}},{"node":{"id":"51d89618-5d7b-52ac-91e0-3214b4b310aa","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"3e6154f8-3b44-5d51-afb1-3172e0bc7f25","frontmatter":{"path":"/week7/3-other-languages","title":"Other languages"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"794774a1-10f5-5254-9e38-863400f55bda","frontmatter":{"path":"/week7/4-more-packages","title":"More on packages"}}},{"node":{"id":"f946767f-980c-5b9e-b564-4de7ac8faded","frontmatter":{"path":"/week7-old","title":"Week 7"}}},{"node":{"id":"7bc8c3c6-0424-55f4-93b9-cb27c27747bb","frontmatter":{"path":"/week7-old/1-data-visualization","title":"Data visualization"}}},{"node":{"id":"0a57da2b-3b04-5ba0-af06-fb2b5243c2f9","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"769091e3-0a57-559a-aa6b-d64cc3bc3358","frontmatter":{"path":"/week5-old/2-hash-map","title":"Hash Map"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"f04dd0e0-34f2-5319-9765-f42864a5b9b6","frontmatter":{"path":"/week4/6-ordered-objects","title":"Ordered Objects"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}