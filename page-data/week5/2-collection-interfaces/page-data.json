{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week5/2-collection-interfaces","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know what an Iterable object is for."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You can use an Iterable object."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know that the Collection interface extends the Iterable interface."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Collections"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A very important application of computer programs is to manipulate, analyze and process a lot of data.\nIn an Object Oriented language, the data is often converted to objects, for example an object per\ntransaction in a financial dataset, one object per observation in a scientific experiment, or\none object per product in a retailer's database.\nTo store many of such objects while being able to retrieve them efficiently,\nJava implements several data structures. We already know some of them, such as the\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":" and the array. The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":" implements the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" interface.\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":" is the most commonly used implementation of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":", but there are others.\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" interface is a subtype of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface, and the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":"\ninterface itself is a subtype of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" interface."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Also, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" interface and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" interface are sub-types of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface. To navigate through all these data structures, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" implements the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" interface. We will cover all these interfaces in the next section."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iterable interface"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable<T>"}]},{"type":"text","value":" are all types that we can use the "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"enhanced for-loop"}]},{"type":"text","value":" on.\nIt specifies only one method: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public Iterator<T> iterator()"}]},{"type":"text","value":".\nAn "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":" is able to indicate whether there are any elements left to iterate on (with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hasNext()"}]},{"type":"text","value":") and to produce the next element (with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"next()"}]},{"type":"text","value":").\nWhen we work with a collection of data containing a bunch of objects, it is often useful to do something "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"for each"}]},{"type":"text","value":" object.\nThe enhanced for-loop should be preferred in such cases. It will use the most efficient way to iterate over a collection."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let us first obtain an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" from a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":":"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"List"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" numbers "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Arrays"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"asList"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"24"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"36"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"48"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" iterable "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" numbers"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can use an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" in various equivalent ways, the preferred way being the\nfor-each loop:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" iterable"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is helpful to realize that the for-each loop is just more efficient syntax to\niterate over an iterator. You could do this with slightly longer code as well,\nfor example using a while loop:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" iter "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" iterable"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"iterator"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"while"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"iter"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"hasNext"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" iter"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"next"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can use a regular for-loop as well, where you leave the increment part of the\nfor-loop empty:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" iter "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" iterable"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"iterator"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" iter"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"hasNext"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" i "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" iter"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"next"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"i"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"hint","name":"Difference between Iterable and Iterator"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the names of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" interfaces are so similar,\nlearners often struggle with the difference. However, the names are quite\nintuitive. In English, the word "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":"  means "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"something that can\nperform iteration"}]},{"type":"text","value":", whereas "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" means something that can be iterated."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One possible analogy is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"water"}]},{"type":"text","value":" and a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"faucet"}]},{"type":"text","value":". Water can flow, and thus\nwe can say that "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"water"}]},{"type":"text","value":" is "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"flowable"}]},{"type":"text","value":". When we open a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"faucet"}]},{"type":"text","value":", the water\nstarts flowing. However, a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"faucet"}]},{"type":"text","value":" itself is not something that can flow."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":", it is similar: it is a thing that can produce some number\nof objects. Often these objects come from some container, such as a list.\nThe object that performs the iteration, i.e. keeps track of which objects\nhave been seen and which ones are still to come, is an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the same idea is true for the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparable"}]},{"type":"text","value":", which are things\nthat can be compared, and the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Comparator"}]},{"type":"text","value":", which is a thing that can\nperform the comparison (but can not necessarily be compared itself)."}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Collection interface"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As mentioned before, a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" is often used to store a large number of objects\nthat represent some kind of data: "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"transactions"}]},{"type":"text","value":", "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"products"}]},{"type":"text","value":", "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"observations"}]},{"type":"text","value":",\nand many other things. In Java, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface can be used to\nindicate that something holds zero or more objects. It does not define\nany properties yet on how these objects are organized: they could be\nsequentially stored, as happens in a list or array, but they might also\nbe stored in different ways."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Collection interface describes functionality related to these collections.\nThe two main subtypes of the collection interface are "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":".\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface provides, for instance, methods for adding\nobjects to the collection ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"add"}]},{"type":"text","value":"), adding all elements from another "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":"\n("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"addAll"}]},{"type":"text","value":"), for checking\nthe existence of an item (the method "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"contains"}]},{"type":"text","value":") and determining the size of a collection (the method "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"size"}]},{"type":"text","value":")."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection<E>"}]},{"type":"text","value":" interface extends "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable<E>"}]},{"type":"text","value":" so we can use the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"enhanced for-loop"}]},{"type":"text","value":" on any "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":".\nOn top of that, it defines a number of methods:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"addAll"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"clear"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"contains"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"containsAll"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"isEmpty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"remove"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"removeAll"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"retainAll"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" arg0"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"size"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The names of these methods are very descriptive. For most of the methods the boolean returned indicates whether the collection changed."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You may wonder why many of the methods, such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"add"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"remove"}]},{"type":"text","value":" return a boolean. Often, the returned value\nof these methods is ignored. It is quite common to write "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"myList.add(\"Hello!\");"}]},{"type":"text","value":" ignoring the fact that a\nboolean is returned. This boolean indicates wheter something has changed in collections. If we add something to a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":",\nthis will always happen, but as we will see a bit later, this may not be the case for a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Set"}]},{"type":"text","value":". Furthermore, removing an\nobject from a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" may result in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" being unchanged if it turns out the given object was not present in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":"\nto begin with. If you find it handy to determine if your "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" has changed as a result of these calls, it can be\nuseful to use the boolean value that is returned, but in most cases you will be fine ignoring the boolean."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the following sections, the following data structure will be introduced that are or can provide subtypes of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":"\ninterface:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Lists and Queues"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Sets: HashSets and TreeSets"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Maps: HashMaps and TreeMaps"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"exercise","properties":{"title":"Test your knowledge"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this quiz, you can test your knowledge on the subjects covered in this chapter."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Explain how you can use an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":" object. How do you obtain such an object from\na variable "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"myList"}]},{"type":"text","value":" with type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List<String>"}]},{"type":"text","value":"?"}]},{"type":"element","tagName":"solution","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To use an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":" object, you call "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hasNext()"}]},{"type":"text","value":" which returns a boolean if any\nmore objects are left to iterate over. Calling "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"next()"}]},{"type":"text","value":" returns the next object\nand the iterator is advanced to the next object in the iteration."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can call "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"myList.iterator()"}]},{"type":"text","value":" to obtain an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator<String>"}]},{"type":"text","value":"."}]}]},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What is the difference between the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":" and the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" interface?\nCan you use the enhanced for loop on both?"}]},{"type":"element","tagName":"solution","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":" is an object that we use to perform iteration of something.\nAn "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" is an object on which we can perform some type of iteration,\nfrom which we can obtain an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterator"}]},{"type":"text","value":". For details, see the infobox above."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The enhanced for loop can only be used on "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable"}]},{"type":"text","value":" objects."}]}]},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A colleague created a new class "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"CookieJar"}]},{"type":"text","value":". Do we know any interfaces that are\nimplemented by this class, given that the following code compiles?"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"CookieJar"}]},{"type":"text","value":" jar "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"CookieJar"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"getTheJar"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Cookie"}]},{"type":"text","value":" cookie "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" jar"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  cookie"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"eat"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"solution","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since it is possible to use the enhanced for loop on objects of the class "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"CookieJar"}]},{"type":"text","value":",\nit must be the case that this class implements the interface "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Iterable<Cookie>"}]},{"type":"text","value":". The\nvalue of the type parameter can be derived of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Cookie"}]},{"type":"text","value":" type as defined in the for\neach loop."}]}]},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Why does the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"addAll()"}]},{"type":"text","value":" method in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" interface return a boolean?"}]},{"type":"element","tagName":"solution","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All methods that possibly modify the contents of a Collection return a boolean\nwhich indicates if the contents of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":" were changed due to the\noperation. Thus, calling "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":".addAll()"}]},{"type":"text","value":" with an empty list as an argument would\nresult in "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"false"}]},{"type":"text","value":" being returned."}]}]}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You know what an Iterable object is for.</li>\n<li>You can use an Iterable object.</li>\n<li>You know that the Collection interface extends the Iterable interface.</li>\n</ul></text-box><h2>Collections</h2><p>A very important application of computer programs is to manipulate, analyze and process a lot of data.\nIn an Object Oriented language, the data is often converted to objects, for example an object per\ntransaction in a financial dataset, one object per observation in a scientific experiment, or\none object per product in a retailer's database.\nTo store many of such objects while being able to retrieve them efficiently,\nJava implements several data structures. We already know some of them, such as the\n<code class=\"language-text\">ArrayList</code> and the array. The <code class=\"language-text\">ArrayList</code> implements the <code class=\"language-text\">List</code> interface.\n<code class=\"language-text\">ArrayList</code> is the most commonly used implementation of the <code class=\"language-text\">List</code>, but there are others.\nThe <code class=\"language-text\">List</code> interface is a subtype of the <code class=\"language-text\">Collection</code> interface, and the <code class=\"language-text\">Collection</code>\ninterface itself is a subtype of the <code class=\"language-text\">Iterable</code> interface.</p><p>Also, the <code class=\"language-text\">Set</code> interface and <code class=\"language-text\">List</code> interface are sub-types of the <code class=\"language-text\">Collection</code> interface. To navigate through all these data structures, the <code class=\"language-text\">Collection</code> implements the <code class=\"language-text\">Iterable</code> interface. We will cover all these interfaces in the next section.</p><h3>Iterable interface</h3><p>The interface <code class=\"language-text\">Iterable&lt;T&gt;</code> are all types that we can use the <strong>enhanced for-loop</strong> on.\nIt specifies only one method: <code class=\"language-text\">public Iterator&lt;T&gt; iterator()</code>.\nAn <code class=\"language-text\">Iterator</code> is able to indicate whether there are any elements left to iterate on (with <code class=\"language-text\">hasNext()</code>) and to produce the next element (with <code class=\"language-text\">next()</code>).\nWhen we work with a collection of data containing a bunch of objects, it is often useful to do something <em>for each</em> object.\nThe enhanced for-loop should be preferred in such cases. It will use the most efficient way to iterate over a collection.</p><p>Let us first obtain an <code class=\"language-text\">Iterable</code> from a <code class=\"language-text\">List</code>:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iterable <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">;</span></code></pre></div><p>You can use an <code class=\"language-text\">Iterable</code> in various equivalent ways, the preferred way being the\nfor-each loop:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">:</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>It is helpful to realize that the for-each loop is just more efficient syntax to\niterate over an iterator. You could do this with slightly longer code as well,\nfor example using a while loop:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iter <span class=\"token operator\">=</span> iterable<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>You can use a regular for-loop as well, where you leave the increment part of the\nfor-loop empty:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iter <span class=\"token operator\">=</span> iterable<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><text-box variant='hint' name='Difference between Iterable and Iterator'><p>Since the names of the <code class=\"language-text\">Iterator</code> and <code class=\"language-text\">Iterable</code> interfaces are so similar,\nlearners often struggle with the difference. However, the names are quite\nintuitive. In English, the word <em>Iterator</em>  means <em>something that can\nperform iteration</em>, whereas <em>Iterable</em> means something that can be iterated.</p><p>One possible analogy is <em>water</em> and a <em>faucet</em>. Water can flow, and thus\nwe can say that <em>water</em> is <em>flowable</em>. When we open a <em>faucet</em>, the water\nstarts flowing. However, a <em>faucet</em> itself is not something that can flow.</p><p>With <code class=\"language-text\">Iterable</code>, it is similar: it is a thing that can produce some number\nof objects. Often these objects come from some container, such as a list.\nThe object that performs the iteration, i.e. keeps track of which objects\nhave been seen and which ones are still to come, is an <code class=\"language-text\">Iterator</code>.</p><p>Note that the same idea is true for the <code class=\"language-text\">Comparable</code>, which are things\nthat can be compared, and the <code class=\"language-text\">Comparator</code>, which is a thing that can\nperform the comparison (but can not necessarily be compared itself).</p></text-box><h2>Collection interface</h2><p>As mentioned before, a <code class=\"language-text\">Collection</code> is often used to store a large number of objects\nthat represent some kind of data: <em>transactions</em>, <em>products</em>, <em>observations</em>,\nand many other things. In Java, the <code class=\"language-text\">Collection</code> interface can be used to\nindicate that something holds zero or more objects. It does not define\nany properties yet on how these objects are organized: they could be\nsequentially stored, as happens in a list or array, but they might also\nbe stored in different ways.</p><p>The Collection interface describes functionality related to these collections.\nThe two main subtypes of the collection interface are <code class=\"language-text\">Set</code> and <code class=\"language-text\">List</code>.\nThe <code class=\"language-text\">Collection</code> interface provides, for instance, methods for adding\nobjects to the collection (<code class=\"language-text\">add</code>), adding all elements from another <code class=\"language-text\">Collection</code>\n(<code class=\"language-text\">addAll</code>), for checking\nthe existence of an item (the method <code class=\"language-text\">contains</code>) and determining the size of a collection (the method <code class=\"language-text\">size</code>).</p><p>The <code class=\"language-text\">Collection&lt;E&gt;</code> interface extends <code class=\"language-text\">Iterable&lt;E&gt;</code> so we can use the <em>enhanced for-loop</em> on any <code class=\"language-text\">Collection</code>.\nOn top of that, it defines a number of methods:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> arg0<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> arg0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>The names of these methods are very descriptive. For most of the methods the boolean returned indicates whether the collection changed.</p><p>You may wonder why many of the methods, such as <code class=\"language-text\">add</code> and <code class=\"language-text\">remove</code> return a boolean. Often, the returned value\nof these methods is ignored. It is quite common to write <code class=\"language-text\">myList.add(&quot;Hello!&quot;);</code> ignoring the fact that a\nboolean is returned. This boolean indicates wheter something has changed in collections. If we add something to a <code class=\"language-text\">List</code>,\nthis will always happen, but as we will see a bit later, this may not be the case for a <code class=\"language-text\">Set</code>. Furthermore, removing an\nobject from a <code class=\"language-text\">List</code> may result in the <code class=\"language-text\">List</code> being unchanged if it turns out the given object was not present in the <code class=\"language-text\">List</code>\nto begin with. If you find it handy to determine if your <code class=\"language-text\">Collection</code> has changed as a result of these calls, it can be\nuseful to use the boolean value that is returned, but in most cases you will be fine ignoring the boolean.</p><p>In the following sections, the following data structure will be introduced that are or can provide subtypes of the <code class=\"language-text\">Collection</code>\ninterface:</p><ul>\n<li>Lists and Queues</li>\n<li>Sets: HashSets and TreeSets</li>\n<li>Maps: HashMaps and TreeMaps</li>\n</ul><Exercise title=\"Test your knowledge\"><p>In this quiz, you can test your knowledge on the subjects covered in this chapter.</p><p>Explain how you can use an <code class=\"language-text\">Iterator</code> object. How do you obtain such an object from\na variable <code class=\"language-text\">myList</code> with type <code class=\"language-text\">List&lt;String&gt;</code>?</p><Solution><p>To use an <code class=\"language-text\">Iterator</code> object, you call <code class=\"language-text\">hasNext()</code> which returns a boolean if any\nmore objects are left to iterate over. Calling <code class=\"language-text\">next()</code> returns the next object\nand the iterator is advanced to the next object in the iteration.</p><p>We can call <code class=\"language-text\">myList.iterator()</code> to obtain an <code class=\"language-text\">Iterator&lt;String&gt;</code>.</p></Solution><hr><p>What is the difference between the <code class=\"language-text\">Iterator</code> and the <code class=\"language-text\">Iterable</code> interface?\nCan you use the enhanced for loop on both?</p><Solution><p>An <code class=\"language-text\">Iterator</code> is an object that we use to perform iteration of something.\nAn <code class=\"language-text\">Iterable</code> is an object on which we can perform some type of iteration,\nfrom which we can obtain an <code class=\"language-text\">Iterator</code>. For details, see the infobox above.</p><p>The enhanced for loop can only be used on <code class=\"language-text\">Iterable</code> objects.</p></Solution><hr><p>A colleague created a new class <code class=\"language-text\">CookieJar</code>. Do we know any interfaces that are\nimplemented by this class, given that the following code compiles?</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">CookieJar</span> jar <span class=\"token operator\">=</span> <span class=\"token class-name\">CookieJar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTheJar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">:</span> jar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cookie<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><Solution><p>Since it is possible to use the enhanced for loop on objects of the class <code class=\"language-text\">CookieJar</code>,\nit must be the case that this class implements the interface <code class=\"language-text\">Iterable&lt;Cookie&gt;</code>. The\nvalue of the type parameter can be derived of the <code class=\"language-text\">Cookie</code> type as defined in the for\neach loop.</p></Solution><hr><p>Why does the <code class=\"language-text\">addAll()</code> method in the <code class=\"language-text\">Collection</code> interface return a boolean?</p><Solution><p>All methods that possibly modify the contents of a Collection return a boolean\nwhich indicates if the contents of the <code class=\"language-text\">Collection</code> were changed due to the\noperation. Thus, calling <code class=\"language-text\">.addAll()</code> with an empty list as an argument would\nresult in <code class=\"language-text\">false</code> being returned.</p></Solution></Exercise></div>","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces","ready":true,"extra":null}},"allPages":{"edges":[{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"6b175f02-c26b-5d01-a0b8-d4ba59735fb9","frontmatter":{"path":"/sessions-and-support-old","title":"Sessions and support (old)"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"61070193-bb81-5ffe-9273-4d925cb903c4","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"9bef9515-fc84-54e8-991b-8d4b87d48498","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"805b2f4f-3ca8-5677-90af-19684fe2f1a6","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"50297e53-5573-59d3-b552-033d1f2fd2e9","frontmatter":{"path":"/week1/4-intro-generic-types","title":"Introduction to Generic Types"}}},{"node":{"id":"c702f4c0-c5b6-59f9-ac7b-c4b7fb6c25e4","frontmatter":{"path":"/week1/5-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"edae41ea-32c8-5c50-9c39-da6ddd03a27d","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"8e0cdb60-a2f4-57a4-acfa-b0ff35995cd5","frontmatter":{"path":"/week2/2-programming-errors","title":"Programming Errors"}}},{"node":{"id":"9dd2beba-08c6-5bc3-9935-f1e987cceb11","frontmatter":{"path":"/week2/3-exception-mechanism","title":"The Exception Mechanism"}}},{"node":{"id":"7d1738cf-5cc8-54c0-bd95-de3364860b04","frontmatter":{"path":"/week2/4-reading-and-writing","title":"Reading and Writing Files"}}},{"node":{"id":"3ed5cf79-1f3d-5ef9-ba9d-3ca30621ddd7","frontmatter":{"path":"/week2/5-introduction-interfaces","title":"Introduction to Interfaces"}}},{"node":{"id":"90da93f1-3687-50c0-a0dd-52c81beb6205","frontmatter":{"path":"/week2/6-character encoding","title":"Background: Character Encodings"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"f2110b31-feb0-527c-9da1-ff1d25fa6184","frontmatter":{"path":"/week3/1-interface-types","title":"Interface Types"}}},{"node":{"id":"ff24676e-fee0-5e80-a6f4-1399135a52a1","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance"}}},{"node":{"id":"d192e5ce-00a6-5835-89fc-9da18ff13927","frontmatter":{"path":"/week3/3-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"1ac11547-1233-5527-b73d-115965177338","frontmatter":{"path":"/week3/4-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"600cbcc7-1e65-5151-b1b2-19dac31ffec9","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass"}}},{"node":{"id":"5843833b-2849-5e09-a878-040476d9e917","frontmatter":{"path":"/week3/6-when-to-use-inheritance","title":"When to use inheritance"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"3c77e811-0eeb-5f51-8e4b-6c358b63d2f2","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"c1ca89fc-9a6b-5b7a-ba89-77760926e436","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class Hierarchies"}}},{"node":{"id":"e8f09b63-9d9f-56e9-bdd9-d15af6ea61b5","frontmatter":{"path":"/week4/3-exception-class-hierarchy","title":"The Exception Class Hierarchy"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"0a57da2b-3b04-5ba0-af06-fb2b5243c2f9","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}},{"node":{"id":"d5fcf95f-5161-58d6-b943-3f6281b745b6","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"b4a29180-0c39-5ff6-95d3-de9e8cc7168e","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"07f0b811-db54-50c5-b1a9-8f1ec669dd98","frontmatter":{"path":"/week5/4-sets","title":"Sets"}}},{"node":{"id":"700b4e9e-1d74-51e9-9c45-e21c370e478d","frontmatter":{"path":"/week5/5-maps","title":"Maps"}}},{"node":{"id":"059db9fd-242a-51a2-889e-635052a23e12","frontmatter":{"path":"/week5/6-collections-utilities","title":"Collection interfaces"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"e47cc568-8f5d-5ac3-b4ad-cdc9cd69c491","frontmatter":{"path":"/week5-old/1-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"3443e6a1-3b94-5ba3-bd1f-bffcea31c570","frontmatter":{"path":"/week5-old/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"95126e2a-9163-5c18-91da-327f10b361d6","frontmatter":{"path":"/week5-old/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"7597a4ef-1156-5cc2-a090-76f7b538facd","frontmatter":{"path":"/week5-old","title":"Week 5 Old"}}},{"node":{"id":"b813f2eb-7615-5115-a613-c40538f0c28e","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"59df04c6-60a3-5041-a349-1e49bbf496bb","frontmatter":{"path":"/week6/2-functional-interfaces","title":"Functional Interfaces"}}},{"node":{"id":"586a0938-cc39-592b-8002-6e5fefa44ee1","frontmatter":{"path":"/week6/3-method-references","title":"Method References"}}},{"node":{"id":"6900ae8c-40db-5565-a8e2-0ed0ca217fb9","frontmatter":{"path":"/week6/4-default-methods","title":"Default methods and Shorter Comparators"}}},{"node":{"id":"641cfd04-517f-5bfe-8c5b-a39bdcba80ff","frontmatter":{"path":"/week6/5-data-processing-pipelines","title":"Data Processing Pipelines"}}},{"node":{"id":"05f3f556-5206-5097-b26e-b74000dcfb91","frontmatter":{"path":"/week6/6-stream-intermediate","title":"Streams: Introduction and Intermediate Operations"}}},{"node":{"id":"bb066ac2-1f33-5fad-b208-9df448371b2a","frontmatter":{"path":"/week6/7-streams-terminal","title":"Streams: Terminal Operations"}}},{"node":{"id":"b2dab7e9-ead6-5b4c-9f76-22a5c63bfa44","frontmatter":{"path":"/week6/8-packages-libraries-maven","title":"Packages, Libraries and Maven"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"69b42037-a4ed-56c4-815f-c9eed53d01cd","frontmatter":{"path":"/week6-old/1-finnish-mooc","title":"Handling collections as streams and Libraries"}}},{"node":{"id":"3d5e1c69-07c2-5252-b0c8-f8dea40e314f","frontmatter":{"path":"/week6-old","title":"Week 6 (Old)"}}},{"node":{"id":"51d89618-5d7b-52ac-91e0-3214b4b310aa","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"df2868a1-d42b-559a-b780-e5a41908823f","frontmatter":{"path":"/week7/2-java-new-features","title":"Java: new Features"}}},{"node":{"id":"3e6154f8-3b44-5d51-afb1-3172e0bc7f25","frontmatter":{"path":"/week7/3-other-languages","title":"Other languages"}}},{"node":{"id":"794774a1-10f5-5254-9e38-863400f55bda","frontmatter":{"path":"/week7/4-more-packages","title":"More on packages"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"7bc8c3c6-0424-55f4-93b9-cb27c27747bb","frontmatter":{"path":"/week7-old/1-data-visualization","title":"Data visualization"}}},{"node":{"id":"f946767f-980c-5b9e-b564-4de7ac8faded","frontmatter":{"path":"/week7-old","title":"Week 7"}}},{"node":{"id":"f04dd0e0-34f2-5319-9765-f42864a5b9b6","frontmatter":{"path":"/week4/6-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"c4174d8b-8002-5dcc-b22d-13c554af05d1","frontmatter":{"path":"/week4/5-equals-and-hashcode","title":"Equals and Hashcode"}}},{"node":{"id":"6bad53a2-3301-5fe6-ab8e-dfedf5efcc00","frontmatter":{"path":"/week4/4-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"769091e3-0a57-559a-aa6b-d64cc3bc3358","frontmatter":{"path":"/week5-old/2-hash-map","title":"Hash Map"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}