{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week4/2-class-hierarchies","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know why class hierarchies can provide you with better understanding of inheritance."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how to read a class hierarchy diagram and what the different shapes mean."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how the Exceptions class hierarchy can be divided in checked and unchecked exceptions."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In your own small projects, you may end up with a few classes which use inheritance, but often not more than a few. However, many useful libraries, which you are likely to end up using, make extensive use of it. Often these libraries have a lot of classes, which can be daunting to the uninitiated, but with a diagram it is often easy to understand the structure of these libraries. For example, when you create Graphical User Interfaces (GUIs). "}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In these diagrams, we follow the following conventions:"}]},{"type":"element","tagName":"img","properties":{"width":759,"alt":"a class is depicted as a rectangle, an abstract class as a parallelogram, and an interface as a rhombus.","src":"https://user-images.githubusercontent.com/67587903/128322543-447d0abd-831d-43c4-91b4-3fdef2a050d1.PNG"},"children":[]},{"type":"element","tagName":"img","properties":{"width":471,"alt":"Also, an arrow depicts the superclass/subclass or supertype/subtype relationship by pointing towards the superclass or supertype.","src":"https://user-images.githubusercontent.com/67587903/128322544-828b4d41-320f-44f1-8230-aeb8c7d89b07.PNG"},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the superclass has the form of a rhombus and is thus an abstract class here, whilst the subclass has the form of a rectangle and is therefore a regular class."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We will now consider one class hierarchies from the standard library: the Exception class hierarchy. We hope that this will give you even more insight on the exceptions we learned about last week."}]},{"type":"element","tagName":"img","properties":{"width":789,"alt":"The picture gives an overview of the relations between different sorts of exceptions and errors. These have also been described in the text.","src":"https://user-images.githubusercontent.com/67587903/128322542-70b1c15f-76cc-4004-8817-cb790e80f9c0.PNG"},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"NB. Please note that you do "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not"}]},{"type":"text","value":" have to learn the upper hierarchy diagram by heart."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Unchecked exceptions"}]},{"type":"text","value":" (those we do not need to catch) are either subclasses of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Error"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":". These have a green background in our picture.\nAll other exceptions must be caught and are called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"checked exceptions"}]},{"type":"text","value":". These have a blue background in our picture."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The answer on whether an exception must be caught or may be caught can thus be found by looking at the Exception hierarchy. "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Unchecked Exceptions"}]},{"type":"text","value":" do not have to be caught and are either a subclass of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Error"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":". All other exceptions are "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Checked Exceptions"}]},{"type":"text","value":" and must be caught.\nYou can even create your own exception types by writing "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public class MyException extends IllegalArgumentException {...}"}]},{"type":"text","value":". If you want it to be unchecked, you put them underneath the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":" in the Exception class hierarchy, and otherwise, in case of a checked exception, you let it be a subclass of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Exception"}]},{"type":"text","value":", but not of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":"."}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You know why class hierarchies can provide you with better understanding of inheritance.</li>\n<li>You know how to read a class hierarchy diagram and what the different shapes mean.</li>\n<li>You know how the Exceptions class hierarchy can be divided in checked and unchecked exceptions.</li>\n</ul></text-box><p>In your own small projects, you may end up with a few classes which use inheritance, but often not more than a few. However, many useful libraries, which you are likely to end up using, make extensive use of it. Often these libraries have a lot of classes, which can be daunting to the uninitiated, but with a diagram it is often easy to understand the structure of these libraries. For example, when you create Graphical User Interfaces (GUIs). </p><p>In these diagrams, we follow the following conventions:</p><img width=\"759\" alt=\"a class is depicted as a rectangle, an abstract class as a parallelogram, and an interface as a rhombus.\" src=\"https://user-images.githubusercontent.com/67587903/128322543-447d0abd-831d-43c4-91b4-3fdef2a050d1.PNG\"><img width=\"471\" alt=\"Also, an arrow depicts the superclass/subclass or supertype/subtype relationship by pointing towards the superclass or supertype.\" src=\"https://user-images.githubusercontent.com/67587903/128322544-828b4d41-320f-44f1-8230-aeb8c7d89b07.PNG\"><p>Note that the superclass has the form of a rhombus and is thus an abstract class here, whilst the subclass has the form of a rectangle and is therefore a regular class.</p><p>We will now consider one class hierarchies from the standard library: the Exception class hierarchy. We hope that this will give you even more insight on the exceptions we learned about last week.</p><img width=\"789\" alt=\"The picture gives an overview of the relations between different sorts of exceptions and errors. These have also been described in the text.\" src=\"https://user-images.githubusercontent.com/67587903/128322542-70b1c15f-76cc-4004-8817-cb790e80f9c0.PNG\"><p>NB. Please note that you do <em>not</em> have to learn the upper hierarchy diagram by heart.</p><p><em>Unchecked exceptions</em> (those we do not need to catch) are either subclasses of <code class=\"language-text\">Error</code> or <code class=\"language-text\">RuntimeException</code>. These have a green background in our picture.\nAll other exceptions must be caught and are called <em>checked exceptions</em>. These have a blue background in our picture.</p><p>The answer on whether an exception must be caught or may be caught can thus be found by looking at the Exception hierarchy. <em>Unchecked Exceptions</em> do not have to be caught and are either a subclass of <code class=\"language-text\">Error</code> or <code class=\"language-text\">RuntimeException</code>. All other exceptions are <em>Checked Exceptions</em> and must be caught.\nYou can even create your own exception types by writing <code class=\"language-text\">public class MyException extends IllegalArgumentException {...}</code>. If you want it to be unchecked, you put them underneath the <code class=\"language-text\">RuntimeException</code> in the Exception class hierarchy, and otherwise, in case of a checked exception, you let it be a subclass of <code class=\"language-text\">Exception</code>, but not of <code class=\"language-text\">RuntimeException</code>.</p></div>","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class hierarchies","ready":null,"extra":null}},"allPages":{"edges":[{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"61070193-bb81-5ffe-9273-4d925cb903c4","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"9bef9515-fc84-54e8-991b-8d4b87d48498","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"805b2f4f-3ca8-5677-90af-19684fe2f1a6","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"50297e53-5573-59d3-b552-033d1f2fd2e9","frontmatter":{"path":"/week1/4-intro-generic-types","title":"Introduction to Generic Types"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"c702f4c0-c5b6-59f9-ac7b-c4b7fb6c25e4","frontmatter":{"path":"/week1/5-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"edae41ea-32c8-5c50-9c39-da6ddd03a27d","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"8e0cdb60-a2f4-57a4-acfa-b0ff35995cd5","frontmatter":{"path":"/week2/2-programming-errors","title":"Programming Errors"}}},{"node":{"id":"9dd2beba-08c6-5bc3-9935-f1e987cceb11","frontmatter":{"path":"/week2/3-exception-mechanism","title":"The Exception Mechanism"}}},{"node":{"id":"7d1738cf-5cc8-54c0-bd95-de3364860b04","frontmatter":{"path":"/week2/4-reading-and-writing","title":"Reading and Writing Files"}}},{"node":{"id":"3ed5cf79-1f3d-5ef9-ba9d-3ca30621ddd7","frontmatter":{"path":"/week2/5-introduction-interfaces","title":"Introduction to Interfaces"}}},{"node":{"id":"90da93f1-3687-50c0-a0dd-52c81beb6205","frontmatter":{"path":"/week2/6-character encoding","title":"Background: Character Encodings"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"f2110b31-feb0-527c-9da1-ff1d25fa6184","frontmatter":{"path":"/week3/1-interface-types","title":"Interface Types"}}},{"node":{"id":"ff24676e-fee0-5e80-a6f4-1399135a52a1","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance"}}},{"node":{"id":"1ac11547-1233-5527-b73d-115965177338","frontmatter":{"path":"/week3/4-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"d192e5ce-00a6-5835-89fc-9da18ff13927","frontmatter":{"path":"/week3/3-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"600cbcc7-1e65-5151-b1b2-19dac31ffec9","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"5843833b-2849-5e09-a878-040476d9e917","frontmatter":{"path":"/week3/6-when-to-use-inheritance","title":"When to use inheritance"}}},{"node":{"id":"3c77e811-0eeb-5f51-8e4b-6c358b63d2f2","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"c1ca89fc-9a6b-5b7a-ba89-77760926e436","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"fd924f9e-b6ae-5fe8-939d-8694eb394d94","frontmatter":{"path":"/week4/4-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"d5fcf95f-5161-58d6-b943-3f6281b745b6","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"a2e1847d-1ad2-5654-9375-887e0c855c19","frontmatter":{"path":"/week4/3-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"0b2873e9-b5f8-5af8-9ff7-dd88fc021ae9","frontmatter":{"path":"/week5/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"b4a29180-0c39-5ff6-95d3-de9e8cc7168e","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"8410b992-abaa-5d25-aed2-299951e44e2e","frontmatter":{"path":"/week5/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"058233ef-86d9-514a-93bc-b43c1e0aeb69","frontmatter":{"path":"/week5/4-sets-and-maps","title":"Sets and Maps"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"89c8b078-1b18-534d-8152-be7786fd05b8","frontmatter":{"path":"/week5/primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"b813f2eb-7615-5115-a613-c40538f0c28e","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"2fdbdcd1-cfe8-5358-b0ea-cddd193daa5a","frontmatter":{"path":"/week6/2-functional-interfaces-data-processing","title":"Functional Interfaces for Data Processing"}}},{"node":{"id":"e830ec0b-4d4c-5dd8-9616-d8b8abd50f52","frontmatter":{"path":"/week6/3-libraries","title":"Libraries"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"cef8a4de-1c16-5a6c-bea4-5058c5fd09f8","frontmatter":{"path":"/week6/1-handling-collections-as-streams","title":"Handling collections as streams"}}},{"node":{"id":"96059a86-7613-5510-b5bd-ecd25c444569","frontmatter":{"path":"/week7/2-packages","title":"More on packages"}}},{"node":{"id":"51d89618-5d7b-52ac-91e0-3214b4b310aa","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"8601f8ef-8218-53fb-bd84-2a2b28fc25db","frontmatter":{"path":"/week7/4-java-new-features","title":"Data visualization"}}},{"node":{"id":"8d7251fd-4844-5444-86df-672c9b2d7ba6","frontmatter":{"path":"/week7/5-other-languages","title":"Data visualization"}}},{"node":{"id":"cc29c79b-fb14-51a5-9bed-4ad14d32300e","frontmatter":{"path":"/week7/3-data-visualization","title":"Data visualization"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"0a57da2b-3b04-5ba0-af06-fb2b5243c2f9","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"cfa2370e-625b-5f9a-9ecc-faf4b1e21cca","frontmatter":{"path":"/week4/5-object-polymorphism","title":"Object polymorphism"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"8ca04fc2-6870-5aa5-ae15-f51ed9b1f72e","frontmatter":{"path":"/week5/2-hash-map","title":"Hash Map"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}