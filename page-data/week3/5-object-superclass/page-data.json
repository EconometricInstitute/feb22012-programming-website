{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week3/5-object-superclass","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know that in the Java programming language every class inherits the Object class, either directly or indirectly"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You understand why every object has methods such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toString"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Object: the cosmic superclass"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In case we you do not define a superclass in a class header, that class will still extend the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" class. As a result of the fact that subtype/supertype relations are transative, this means every class in Java is a subclass of Object.\nTherefore, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" is sometimes referred to as the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"cosmic superclass"}]},{"type":"text","value":", since it is the superclass of everything."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A number of methods is defined in the Object class. Some of those are outside the scope of this course, such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"clone()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"finalize()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getClass()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"notify()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"notifyAll()"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"wait()"}]},{"type":"text","value":". That leaves us with three methods that we will cover: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toString()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals()"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode()"}]},{"type":"text","value":". Here, we will only cover the first. The other two will be covered next week."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"toString() method"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toString()"}]},{"type":"text","value":" method is used to obtain a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" that describes the object, and is automatically called when we print an arbitrary object, like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"System.out.println(anyObject);"}]},{"type":"text","value":".\nThe default behavior defined in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" class is that the JVM prints the name of the class, the @ symbol and something which resembles (but is not exactly) the identity of the object.\nWhen you print objects of your own classes, you typically see something like this: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ClassName@23df3521"}]},{"type":"text","value":". This is due to the default implementation of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toString()"}]},{"type":"text","value":" method in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":" class.\nHowever, since "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toString()"}]},{"type":"text","value":" is just a method, it is very useful to override it if we want to print objects of the class we are creating.\nThe "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"System.out.println"}]},{"type":"text","value":" method, or concatenation to a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" with an expression like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"\"My object\" + myObj"}]},{"type":"text","value":" makes sure the"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toString()"}]},{"type":"text","value":" method is called automatically to convert the\nto a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" automatically."}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You know that in the Java programming language every class inherits the Object class, either directly or indirectly</li>\n<li>You understand why every object has methods such as <code class=\"language-text\">toString</code>, <code class=\"language-text\">equals</code>, and <code class=\"language-text\">hashCode</code>.</li>\n</ul></text-box><h2>Object: the cosmic superclass</h2><p>In case we you do not define a superclass in a class header, that class will still extend the <code class=\"language-text\">Object</code> class. As a result of the fact that subtype/supertype relations are transative, this means every class in Java is a subclass of Object.\nTherefore, <code class=\"language-text\">Object</code> is sometimes referred to as the <em>cosmic superclass</em>, since it is the superclass of everything.</p><p>A number of methods is defined in the Object class. Some of those are outside the scope of this course, such as <code class=\"language-text\">clone()</code>, <code class=\"language-text\">finalize()</code>, <code class=\"language-text\">getClass()</code>, <code class=\"language-text\">notify()</code>, <code class=\"language-text\">notifyAll()</code>, and <code class=\"language-text\">wait()</code>. That leaves us with three methods that we will cover: <code class=\"language-text\">toString()</code>, <code class=\"language-text\">equals()</code>, and <code class=\"language-text\">hashCode()</code>. Here, we will only cover the first. The other two will be covered next week.</p><h3>toString() method</h3><p>The <code class=\"language-text\">toString()</code> method is used to obtain a <code class=\"language-text\">String</code> that describes the object, and is automatically called when we print an arbitrary object, like <code class=\"language-text\">System.out.println(anyObject);</code>.\nThe default behavior defined in the <code class=\"language-text\">Object</code> class is that the JVM prints the name of the class, the @ symbol and something which resembles (but is not exactly) the identity of the object.\nWhen you print objects of your own classes, you typically see something like this: <code class=\"language-text\">ClassName@23df3521</code>. This is due to the default implementation of <code class=\"language-text\">toString()</code> method in the <code class=\"language-text\">Object</code> class.\nHowever, since <code class=\"language-text\">toString()</code> is just a method, it is very useful to override it if we want to print objects of the class we are creating.\nThe <code class=\"language-text\">System.out.println</code> method, or concatenation to a <code class=\"language-text\">String</code> with an expression like <code class=\"language-text\">&quot;My object&quot; + myObj</code> makes sure the<code class=\"language-text\">toString()</code> method is called automatically to convert the\nto a <code class=\"language-text\">String</code> automatically.</p></div>","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass","ready":true,"extra":null}},"allPages":{"edges":[{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"61070193-bb81-5ffe-9273-4d925cb903c4","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"9bef9515-fc84-54e8-991b-8d4b87d48498","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"805b2f4f-3ca8-5677-90af-19684fe2f1a6","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"c702f4c0-c5b6-59f9-ac7b-c4b7fb6c25e4","frontmatter":{"path":"/week1/5-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"50297e53-5573-59d3-b552-033d1f2fd2e9","frontmatter":{"path":"/week1/4-intro-generic-types","title":"Introduction to Generic Types"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"8e0cdb60-a2f4-57a4-acfa-b0ff35995cd5","frontmatter":{"path":"/week2/2-programming-errors","title":"Programming Errors"}}},{"node":{"id":"edae41ea-32c8-5c50-9c39-da6ddd03a27d","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"7d1738cf-5cc8-54c0-bd95-de3364860b04","frontmatter":{"path":"/week2/4-reading-and-writing","title":"Reading and Writing Files"}}},{"node":{"id":"9dd2beba-08c6-5bc3-9935-f1e987cceb11","frontmatter":{"path":"/week2/3-exception-mechanism","title":"The Exception Mechanism"}}},{"node":{"id":"3ed5cf79-1f3d-5ef9-ba9d-3ca30621ddd7","frontmatter":{"path":"/week2/5-introduction-interfaces","title":"Introduction to Interfaces"}}},{"node":{"id":"90da93f1-3687-50c0-a0dd-52c81beb6205","frontmatter":{"path":"/week2/6-character encoding","title":"Background: Character Encodings"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"f2110b31-feb0-527c-9da1-ff1d25fa6184","frontmatter":{"path":"/week3/1-interface-types","title":"Interface Types"}}},{"node":{"id":"ff24676e-fee0-5e80-a6f4-1399135a52a1","frontmatter":{"path":"/week3/2-interface-inheritance","title":"Interface Inheritance"}}},{"node":{"id":"d192e5ce-00a6-5835-89fc-9da18ff13927","frontmatter":{"path":"/week3/3-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"1ac11547-1233-5527-b73d-115965177338","frontmatter":{"path":"/week3/4-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"600cbcc7-1e65-5151-b1b2-19dac31ffec9","frontmatter":{"path":"/week3/5-object-superclass","title":"Object, the Cosmic Superclass"}}},{"node":{"id":"5843833b-2849-5e09-a878-040476d9e917","frontmatter":{"path":"/week3/6-when-to-use-inheritance","title":"When to use inheritance"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"3c77e811-0eeb-5f51-8e4b-6c358b63d2f2","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes"}}},{"node":{"id":"c1ca89fc-9a6b-5b7a-ba89-77760926e436","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class Hierarchies"}}},{"node":{"id":"e8f09b63-9d9f-56e9-bdd9-d15af6ea61b5","frontmatter":{"path":"/week4/3-exception-class-hierarchy","title":"The Exception Class Hierarchy"}}},{"node":{"id":"0a57da2b-3b04-5ba0-af06-fb2b5243c2f9","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}},{"node":{"id":"6bad53a2-3301-5fe6-ab8e-dfedf5efcc00","frontmatter":{"path":"/week4/4-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"d5fcf95f-5161-58d6-b943-3f6281b745b6","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"0b2873e9-b5f8-5af8-9ff7-dd88fc021ae9","frontmatter":{"path":"/week5/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"b4a29180-0c39-5ff6-95d3-de9e8cc7168e","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"8410b992-abaa-5d25-aed2-299951e44e2e","frontmatter":{"path":"/week5/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"058233ef-86d9-514a-93bc-b43c1e0aeb69","frontmatter":{"path":"/week5/4-sets-and-maps","title":"Sets and Maps"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"89c8b078-1b18-534d-8152-be7786fd05b8","frontmatter":{"path":"/week5/primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"b813f2eb-7615-5115-a613-c40538f0c28e","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"2fdbdcd1-cfe8-5358-b0ea-cddd193daa5a","frontmatter":{"path":"/week6/2-functional-interfaces-data-processing","title":"Functional Interfaces for Data Processing"}}},{"node":{"id":"cef8a4de-1c16-5a6c-bea4-5058c5fd09f8","frontmatter":{"path":"/week6/1-handling-collections-as-streams","title":"Handling collections as streams"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"e830ec0b-4d4c-5dd8-9616-d8b8abd50f52","frontmatter":{"path":"/week6/3-libraries","title":"Libraries"}}},{"node":{"id":"51d89618-5d7b-52ac-91e0-3214b4b310aa","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"96059a86-7613-5510-b5bd-ecd25c444569","frontmatter":{"path":"/week7/2-packages","title":"More on packages"}}},{"node":{"id":"8601f8ef-8218-53fb-bd84-2a2b28fc25db","frontmatter":{"path":"/week7/4-java-new-features","title":"Data visualization"}}},{"node":{"id":"cc29c79b-fb14-51a5-9bed-4ad14d32300e","frontmatter":{"path":"/week7/3-data-visualization","title":"Data visualization"}}},{"node":{"id":"8d7251fd-4844-5444-86df-672c9b2d7ba6","frontmatter":{"path":"/week7/5-other-languages","title":"Data visualization"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"c4174d8b-8002-5dcc-b22d-13c554af05d1","frontmatter":{"path":"/week4/5-equals-and-hashcode","title":"Equals and Hashcode"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"8ca04fc2-6870-5aa5-ae15-f51ed9b1f72e","frontmatter":{"path":"/week5/2-hash-map","title":"Hash Map"}}},{"node":{"id":"f04dd0e0-34f2-5319-9765-f42864a5b9b6","frontmatter":{"path":"/week4/6-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week4","title":"Week 4"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}