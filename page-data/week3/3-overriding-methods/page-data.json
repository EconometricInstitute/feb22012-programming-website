{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week3/3-overriding-methods","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You are familiar with the concepts of a method parameter, a method's return value, and a program's call stack."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how to create methods and how to call them from both the main program (the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"main"}]},{"type":"text","value":" method) and from inside other methods."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You can create parameterized and non-parameterized methods, and you can create methods that return a value."}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Methods of a superclass"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes it is useful to redefine the body of one or more methods of the superclass."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SimpleFunction"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compute"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" x"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"findClosestToZero"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" lb"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" ub"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" step"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" best "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" lb"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" bestVal "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Math"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"abs"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compute"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"lb"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" cur "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" lb"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" cur "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<="}]},{"type":"text","value":" ub"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" cur "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+="}]},{"type":"text","value":" step"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"val "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":" bestVal"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n                best "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" cur"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n                bestVal "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" val"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" best"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Polynomial"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SimpleFunction"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" factors"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Polynomial"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"doublep"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":" coefficients"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"super"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        factors "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" coefficients"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n    \n    "},{"type":"element","tagName":"span","properties":{"className":["token","annotation","punctuation"]},"children":[{"type":"text","value":"@Override"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compute"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" x"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" result "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" d "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" d "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":" factors"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"length"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" d"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n            result "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+="}]},{"type":"text","value":" factors"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"text","value":"d"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Math"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"pow"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"x"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":"d"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" result"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The version of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"compute"}]},{"type":"text","value":" which is executed depends on the "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"type of the object"}]},{"type":"text","value":", not on the type of the variable which contains the reference to the object.\nFor instance if we would run this:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SimpleFunction"}]},{"type":"text","value":" f1 "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SimpleFunction"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"f1"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compute"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"double"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" coeffs "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Polynomial"}]},{"type":"text","value":" f2 "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"New"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Polynomial"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"coeffs"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"f2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compute"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SimpleFunction"}]},{"type":"text","value":" f3 "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" f2"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"f3"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"compute"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"sample-output","properties":{},"children":[{"type":"text","value":"\n2.0\n12.0\n12.0\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When we override a method, we redefine the body of a method. Sometimes it is useful to call the original method in the overriden method, using the reference "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"super"}]},{"type":"text","value":". For example, if we want to create a subclass of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":" where we print a value as soon as it is added to the list by a call to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":".add()"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"LoggerList"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"extends"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Double"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"LoggerList"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"super"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n    \n    "},{"type":"element","tagName":"span","properties":{"className":["token","annotation","punctuation"]},"children":[{"type":"text","value":"@Override"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Double"}]},{"type":"text","value":" d"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"System"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"out"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"println"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Adding \""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" d"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" result "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"super"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"d"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" result"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Apart from overriding the method of a subclass, we can redefine a method of a super-class in the same way as we write a regular method. We should also add the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"@Override"}]},{"type":"text","value":" annotation so the compiler can check whether we are really redefining some method.\nWhich implementation of a method is executed, depends on the type of object, not on the type of variable referring to it.\nWe can forbid a method to be overridden by subclasses with the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"final"}]},{"type":"text","value":" keyword in the header, for example: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public final void doSomething() { ... }"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Object: the cosmic superclass"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In case we do not define a superclass in our class header, a class will still extend "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":". As a result, every class in Java is a subclass of Object. Therefore, it is also known as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"The Cosmic Superclass"}]},{"type":"text","value":".\nA number of methods is defined in the Object class. Some of those are outside the scope of this course, such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"clone()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"finalize()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"getClass()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"notify()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"notifyAll()"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"wait()"}]},{"type":"text","value":". That leaves us with three methods that we will cover: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toString()"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"equals()"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hashCode()"}]},{"type":"text","value":". Here, we will only cover the first. The other two will be covered next week."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"toString() method"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we print an arbitrary object, like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"System.out.println(anyObject);"}]},{"type":"text","value":", the compiler mostly prints the name of the class, the @ symbol and the current memory address, like this: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ClassName@23df3521"}]},{"type":"text","value":". This is due to the default implementation of the toString() method in the Object class.\nTherefore, it is very useful to override the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toString()"}]},{"type":"text","value":" method if we want to print objects of the class we are creating. The printing method, namely, automatically concenates the Object to a String and calls the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"toString()"}]},{"type":"text","value":" method automatically."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Two more keywords: protected and instanceof"}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"protected"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before, we have seen the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":" keywords. Methods and variables that are "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" can be called and accessed from anywhere. Methods and variables that are "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"private"}]},{"type":"text","value":", however, can only be called and accessed from within the same class (or java file)."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now, we introduce the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"protected"}]},{"type":"text","value":" keyword. Methods and variables that are "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"protected"}]},{"type":"text","value":", can not only be called and accessed from within the same class definitions, but also from within its subclass definitions. Also, they can be called and accessed from within the same package, but in our assignments we do not use packages, so all our classes are in the same package. For instance, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":" is in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"java.util"}]},{"type":"text","value":" package, so we cannot acces "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"protected"}]},{"type":"text","value":" variables and methods of an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":", unless we create a subclass of it."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"instanceof"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Consider the example where we are casting non-primitive types:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"DefivatifeFunction"}]},{"type":"text","value":" df "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SineFunction"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1000"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SineFunction"}]},{"type":"text","value":" sf "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SineFunction"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" df"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the above example it is safe to do this, because we know for sure that "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"df"}]},{"type":"text","value":" is of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SineFunction"}]},{"type":"text","value":". However, if we do not know what kind of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DerivativeFunction"}]},{"type":"text","value":" is used, we will get a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ClassCastException"}]},{"type":"text","value":" if "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"df"}]},{"type":"text","value":" is not a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"SineFunction"}]},{"type":"text","value":".\nWe can use the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"instanceof"}]},{"type":"text","value":" keyword to check whether it is safe to cast a supertype to a subtype, like this:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"void"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"doSomething"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"DerivativeFunction"}]},{"type":"text","value":" df"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"df "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"instanceof"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SineFunction"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SineFunction"}]},{"type":"text","value":" sf "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"SineFunction"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" df"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// Do something with sf here"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// Do something else"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Typically, it is preferred to use inheritance and method overloading to prevent having to do these kind of type checks, but in some cases it can be very useful."}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You are familiar with the concepts of a method parameter, a method's return value, and a program's call stack.</li>\n<li>You know how to create methods and how to call them from both the main program (the <code class=\"language-text\">main</code> method) and from inside other methods.</li>\n<li>You can create parameterized and non-parameterized methods, and you can create methods that return a value.</li>\n</ul></text-box><h2>Methods of a superclass</h2><p>Sometimes it is useful to redefine the body of one or more methods of the superclass.</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleFunction</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">findClosestToZero</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> lb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> ub<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> best <span class=\"token operator\">=</span> lb<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> bestVal <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>lb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> cur <span class=\"token operator\">=</span> lb<span class=\"token punctuation\">;</span> cur <span class=\"token operator\">&lt;=</span> ub<span class=\"token punctuation\">;</span> cur <span class=\"token operator\">+=</span> step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> bestVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                best <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n                bestVal <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> best<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Polynomial</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SimpleFunction</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> factors<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Polynomial</span><span class=\"token punctuation\">(</span>doublep<span class=\"token punctuation\">[</span> coefficients<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factors <span class=\"token operator\">=</span> coefficients<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> d <span class=\"token operator\">&lt;</span> factors<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> d<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">+=</span> factors<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>The version of <code class=\"language-text\">compute</code> which is executed depends on the <strong>type of the object</strong>, not on the type of the variable which contains the reference to the object.\nFor instance if we would run this:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">SimpleFunction</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> coeffs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Polynomial</span> f2 <span class=\"token operator\">=</span> <span class=\"token class-name\">New</span> <span class=\"token class-name\">Polynomial</span><span class=\"token punctuation\">(</span>coeffs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">SimpleFunction</span> f3 <span class=\"token operator\">=</span> f2<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><sample-output>\n2.0\n12.0\n12.0\n</sample-output><p>When we override a method, we redefine the body of a method. Sometimes it is useful to call the original method in the overriden method, using the reference <code class=\"language-text\">super</code>. For example, if we want to create a subclass of <code class=\"language-text\">ArrayList</code> where we print a value as soon as it is added to the list by a call to <code class=\"language-text\">.add()</code>.</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LoggerList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adding \"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>Apart from overriding the method of a subclass, we can redefine a method of a super-class in the same way as we write a regular method. We should also add the <code class=\"language-text\">@Override</code> annotation so the compiler can check whether we are really redefining some method.\nWhich implementation of a method is executed, depends on the type of object, not on the type of variable referring to it.\nWe can forbid a method to be overridden by subclasses with the <code class=\"language-text\">final</code> keyword in the header, for example: <code class=\"language-text\">public final void doSomething() { ... }</code>.</p><h2>Object: the cosmic superclass</h2><p>In case we do not define a superclass in our class header, a class will still extend <code class=\"language-text\">Object</code>. As a result, every class in Java is a subclass of Object. Therefore, it is also known as <code class=\"language-text\">The Cosmic Superclass</code>.\nA number of methods is defined in the Object class. Some of those are outside the scope of this course, such as <code class=\"language-text\">clone()</code>, <code class=\"language-text\">finalize()</code>, <code class=\"language-text\">getClass()</code>, <code class=\"language-text\">notify()</code>, <code class=\"language-text\">notifyAll()</code>, and <code class=\"language-text\">wait()</code>. That leaves us with three methods that we will cover: <code class=\"language-text\">toString()</code>, <code class=\"language-text\">equals()</code>, and <code class=\"language-text\">hashCode()</code>. Here, we will only cover the first. The other two will be covered next week.</p><h3>toString() method</h3><p>If we print an arbitrary object, like <code class=\"language-text\">System.out.println(anyObject);</code>, the compiler mostly prints the name of the class, the @ symbol and the current memory address, like this: <code class=\"language-text\">ClassName@23df3521</code>. This is due to the default implementation of the toString() method in the Object class.\nTherefore, it is very useful to override the <code class=\"language-text\">toString()</code> method if we want to print objects of the class we are creating. The printing method, namely, automatically concenates the Object to a String and calls the <code class=\"language-text\">toString()</code> method automatically.</p><h2>Two more keywords: protected and instanceof</h2><h3>protected</h3><p>Before, we have seen the <code class=\"language-text\">public</code> and <code class=\"language-text\">private</code> keywords. Methods and variables that are <code class=\"language-text\">public</code> can be called and accessed from anywhere. Methods and variables that are <code class=\"language-text\">private</code>, however, can only be called and accessed from within the same class (or java file).</p><p>Now, we introduce the <code class=\"language-text\">protected</code> keyword. Methods and variables that are <code class=\"language-text\">protected</code>, can not only be called and accessed from within the same class definitions, but also from within its subclass definitions. Also, they can be called and accessed from within the same package, but in our assignments we do not use packages, so all our classes are in the same package. For instance, <code class=\"language-text\">ArrayList</code> is in the <code class=\"language-text\">java.util</code> package, so we cannot acces <code class=\"language-text\">protected</code> variables and methods of an <code class=\"language-text\">ArrayList</code>, unless we create a subclass of it.</p><h3>instanceof</h3><p>Consider the example where we are casting non-primitive types:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">DefivatifeFunction</span> df <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SineFunction</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SineFunction</span> sf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SineFunction</span><span class=\"token punctuation\">)</span> df<span class=\"token punctuation\">;</span></code></pre></div><p>In the above example it is safe to do this, because we know for sure that <code class=\"language-text\">df</code> is of type <code class=\"language-text\">SineFunction</code>. However, if we do not know what kind of <code class=\"language-text\">DerivativeFunction</code> is used, we will get a <code class=\"language-text\">ClassCastException</code> if <code class=\"language-text\">df</code> is not a <code class=\"language-text\">SineFunction</code>.\nWe can use the <code class=\"language-text\">instanceof</code> keyword to check whether it is safe to cast a supertype to a subtype, like this:</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DerivativeFunction</span> df<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>df <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SineFunction</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">SineFunction</span> sf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SineFunction</span><span class=\"token punctuation\">)</span> df<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Do something with sf here</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Do something else</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>Typically, it is preferred to use inheritance and method overloading to prevent having to do these kind of type checks, but in some cases it can be very useful.</p></div>","frontmatter":{"path":"/week3/3-overriding-methods","title":"Overriding Methods"}},"allPages":{"edges":[{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"61070193-bb81-5ffe-9273-4d925cb903c4","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"9bef9515-fc84-54e8-991b-8d4b87d48498","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"805b2f4f-3ca8-5677-90af-19684fe2f1a6","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"03d10486-ab30-57f6-ae41-8a809bd25200","frontmatter":{"path":"/week1/4-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"edae41ea-32c8-5c50-9c39-da6ddd03a27d","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"9652a1f5-fbda-5444-b959-73ebf75bca19","frontmatter":{"path":"/week2/2-errors-and-exceptions","title":"Errors and Exceptions"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"86f7525b-b9b1-5729-bf09-3387e6d0b002","frontmatter":{"path":"/week2/3-reading-and-writing","title":"Reading and Writing"}}},{"node":{"id":"daa93876-246f-56ba-855f-045a3ff4fba1","frontmatter":{"path":"/week3/1-Interfaces-and-polymorphism","title":"Interfaces and polymorphism"}}},{"node":{"id":"75db0ac4-4fcd-5090-a648-695c18e91099","frontmatter":{"path":"/week3/2-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"dbddf2b6-a71c-56fd-9c56-28f0c2dfad18","frontmatter":{"path":"/week3/3-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"9d8c01bf-bc1d-58dc-b555-95c8cbd069db","frontmatter":{"path":"/week3/3-object-polymorphism","title":"Object polymorphism"}}},{"node":{"id":"3c77e811-0eeb-5f51-8e4b-6c358b63d2f2","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes and Methods"}}},{"node":{"id":"c1ca89fc-9a6b-5b7a-ba89-77760926e436","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"a2e1847d-1ad2-5654-9375-887e0c855c19","frontmatter":{"path":"/week4/3-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"fd924f9e-b6ae-5fe8-939d-8694eb394d94","frontmatter":{"path":"/week4/4-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"0a57da2b-3b04-5ba0-af06-fb2b5243c2f9","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}},{"node":{"id":"d5fcf95f-5161-58d6-b943-3f6281b745b6","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"0b2873e9-b5f8-5af8-9ff7-dd88fc021ae9","frontmatter":{"path":"/week5/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"b4a29180-0c39-5ff6-95d3-de9e8cc7168e","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"8410b992-abaa-5d25-aed2-299951e44e2e","frontmatter":{"path":"/week5/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"b813f2eb-7615-5115-a613-c40538f0c28e","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"2fdbdcd1-cfe8-5358-b0ea-cddd193daa5a","frontmatter":{"path":"/week6/2-functional-interfaces-data-processing","title":"Functional Interfaces for Data Processing"}}},{"node":{"id":"e830ec0b-4d4c-5dd8-9616-d8b8abd50f52","frontmatter":{"path":"/week6/3-maven-and-third-party-libraries","title":"Maven and third-party libraries"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"cef8a4de-1c16-5a6c-bea4-5058c5fd09f8","frontmatter":{"path":"/week6/1-handling-collections-as-streams","title":"Handling collections as streams"}}},{"node":{"id":"829bf071-214a-53f1-8e87-531b0b6cd0c0","frontmatter":{"path":"/week7/1-packages","title":"Packages"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"cc29c79b-fb14-51a5-9bed-4ad14d32300e","frontmatter":{"path":"/week7/3-data-visualization","title":"Data visualization"}}},{"node":{"id":"058233ef-86d9-514a-93bc-b43c1e0aeb69","frontmatter":{"path":"/week5/4-sets-and-maps","title":"Sets and Maps"}}},{"node":{"id":"6fea97f0-cbc2-5c70-b789-6f1e5660f0aa","frontmatter":{"path":"/week5/4-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"8ca04fc2-6870-5aa5-ae15-f51ed9b1f72e","frontmatter":{"path":"/week5/2-hash-map","title":"Hash Map"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}