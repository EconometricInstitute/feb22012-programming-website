{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week7/1-course-overview","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning Objectives"},"children":[{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You revise all the subject matter and prepare well for the exam"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Classes and Objects"}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Classes"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You need to understand how you write a class; you put each class in its own .java file, with the basic syntax: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"public class MyName … { … }"}]},{"type":"text","value":".\nWithin the class you can define variables and methods. The typical order is to first define the variables, then the constructors, and last the\nmethods."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You need to know the distinction between instance variables and class (static) variables and local variables\nYou can define methods to operate on objects (regular methods) and to operate without an object (static methods).\nMethods that only read information from the object are called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"accessor methods"}]},{"type":"text","value":". Methods that change the state/information stored in the object are called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"mutator methods"}]},{"type":"text","value":".\nMethods and constructors can be "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"overloaded"}]},{"type":"text","value":". The type system is used to figure out which one will be executed."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Type System"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Java is a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"strongly typed"}]},{"type":"text","value":" language. As a result, all variables and expressions have a type. Expressions can be all kinds of things, e.g. just a literal "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"36"}]},{"type":"text","value":", a variable "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":", summing two variables "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"x + y"}]},{"type":"text","value":", a call to a method "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Math.min(3,5)"}]},{"type":"text","value":" or even a call to a constructor "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"new ArrayList<Integer>()"}]},{"type":"text","value":".\nThere is an important distinction between primitive types and nonprimitive types, although "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Autoboxing"}]},{"type":"text","value":" converts primitive values 'automaticaly' to non-primitive values and vice-versa. To convert between types, "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"implicit casts"}]},{"type":"text","value":" are allowed when the compiler can reason they are safe. "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Explicit casts"}]},{"type":"text","value":" are potentially unsafe.\nYou have "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"generic types"}]},{"type":"text","value":", like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList<Integer>"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Map<String,Integer>"}]},{"type":"text","value":", where generic types are denoted by a type variable (e.g. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList<E>"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Map<K,V>"}]},{"type":"text","value":" )"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You also need to understand relations between types: "}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Interfaces can be implemented by classes, which implies objects of that class can also be used as the type of the interface. (subtype: class, supertype: interface)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"When working with inheritance, subclasses also are of the type of their superclass, but the other way around needs explicit casting."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Relations can be visualized using a class hierarchy diagram (which can also show interfaces and abstract classes)."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The compiler uses the type system to reason about the correctness of types in your code. You should be able to reason about types like the compiler does. This is an important skill when you are coding in a team, use libraries written by other people, etc."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Casting and instanceof"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Suppose that we have a Herbivore which is a subclass of Creature. Which of the following assignments are okay?"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Herbivore"}]},{"type":"text","value":" h "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"new"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Herbivore"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Creature"}]},{"type":"text","value":" c "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" h"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Herbivore"}]},{"type":"text","value":" h2 "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" c"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The third line is not, because a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Herbivore"}]},{"type":"text","value":" is more specific than a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Creature"}]},{"type":"text","value":" by being a subclass. Thus, the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Creature"}]},{"type":"text","value":" object cannot be cast into a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Herbivore"}]},{"type":"text","value":" object.\nThe second line, however, performs an implicit cast (it is always safe, since we go "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"from a subtype to a supertype"}]},{"type":"text","value":").\nIt is important that you can figure out these sorts of errors for Question 3 in the practice exam!\nIf we want to convert a creature to a human, we have to check the type of the creature and perform a cast afterwards."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"c "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"instanceof"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Human"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Human"}]},{"type":"text","value":" h2 "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Human"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" c"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Objects"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You should be able to instantiate objects using their constructor.\nYou should understand that you can call methods on objects."}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Within a class, you can just call the methods of the current object without using a\nperiod to call them. (e.g. within countFile() you can call count())"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"When you call methods on other objects, you need the period."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"sizeSquared"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","class-name"]},"children":[{"type":"text","value":"Collection"}]},{"type":"element","tagName":"span","properties":{"className":["token","generics"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":">"}]}]},{"type":"text","value":" col"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"return"}]},{"type":"text","value":" col"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"size"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" col"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"size"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also pass objects to methods and constructor (see above). You can obtain a reference to the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"current"}]},{"type":"text","value":" object via the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" keyword.\nYou should be able to use some basic objects used during the assignments (e.g. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"BigInteger"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ArrayList"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"PrintWriter"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Scanner"}]},{"type":"text","value":", etc.).\nAlso, you should be able to call and use methods of classes you have not seen before, but for which an explanation is provided of how they work."}]},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"References and (Im)mutability"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Variables of non-primitive types hold references. We can have multiple references to the same object. This can lead to confusion if you modify the object using one reference, since these modifications will also be observable via the other references.\nA non-primitive variable can also hold a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" reference. If that is the case calling a method on in or accessing an instance variables throws a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"NullPointerException"}]},{"type":"text","value":".\nSome classes have been designed such that all modifications of an object are forbidden. Notable examples are "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":". Objects of these classes are called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"immutable"}]},{"type":"text","value":". With such objects you don’t have to worry about the reference issue.\nOther classes, however, can be modified and are called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"mutable"}]},{"type":"text","value":". The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Collection"}]},{"type":"text","value":"s are notable examples.\nReasoning about references can be made easier using "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Memory State Diagrams"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Exceptions"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When a problematic situation is detected, programs can and should raise an exception. In Java, an exception is raised using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"throw"}]},{"type":"text","value":" keyword and an object of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Throwable"}]},{"type":"text","value":".\nYou can indicate that a method might throw an Exception using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"throws"}]},{"type":"text","value":" keyword in the method header.\nYou have multiple constructions with the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"try"}]},{"type":"text","value":" keyword:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"try-catch"}]},{"type":"text","value":" construction (multiple catch clauses allowed)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"try-finally"}]},{"type":"text","value":" construction (executed as soon as the try clause is exited)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"try-catch-finally"}]},{"type":"text","value":" construction (combination of above)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"try-with-resources"}]},{"type":"text","value":" construction (no catch or finally necessary)"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"checked exceptions"}]},{"type":"text","value":" and "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"unchecked exceptions"}]},{"type":"text","value":". Subclasses of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Error"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RuntimeException"}]},{"type":"text","value":" are unchecked. All other exceptions are "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"checked exceptions"}]},{"type":"text","value":".\nChecked exceptions either need to be caught, or thrown the caller (this can be indicated with throws in the method header). This is not necessary for unchecked exceptions, but if you throw them, it is nice to still indicate this to other programmers in the method header.\nThe only checked Exceptions that you have dealt with are the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"IOException"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"FileNotFoundException"}]},{"type":"text","value":".\nFor instance, the constructors of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Scanner"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"PrintWriter"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"FileInputStream"}]},{"type":"text","value":" can throw a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"FileNotFoundException"}]},{"type":"text","value":". The readLine() method of BufferedReader can throw a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"IOException"}]},{"type":"text","value":".\nThis is not indicated in the reference you have available at the exam, so you should remember it!"}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Interfaces"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"dia 10"}]}]},"html":"<div><text-box variant='learningObjectives' name='Learning Objectives'><ul>\n<li>You revise all the subject matter and prepare well for the exam</li>\n</ul></text-box><h2>Classes and Objects</h2><h3>Classes</h3><p>You need to understand how you write a class; you put each class in its own .java file, with the basic syntax: <code class=\"language-text\">public class MyName … { … }</code>.\nWithin the class you can define variables and methods. The typical order is to first define the variables, then the constructors, and last the\nmethods.</p><p>You need to know the distinction between instance variables and class (static) variables and local variables\nYou can define methods to operate on objects (regular methods) and to operate without an object (static methods).\nMethods that only read information from the object are called <em>accessor methods</em>. Methods that change the state/information stored in the object are called <em>mutator methods</em>.\nMethods and constructors can be <em>overloaded</em>. The type system is used to figure out which one will be executed.</p><h3>The Type System</h3><p>Java is a <em>strongly typed</em> language. As a result, all variables and expressions have a type. Expressions can be all kinds of things, e.g. just a literal <code class=\"language-text\">36</code>, a variable <code class=\"language-text\">x</code>, summing two variables <code class=\"language-text\">x + y</code>, a call to a method <code class=\"language-text\">Math.min(3,5)</code> or even a call to a constructor <code class=\"language-text\">new ArrayList&lt;Integer&gt;()</code>.\nThere is an important distinction between primitive types and nonprimitive types, although <em>Autoboxing</em> converts primitive values 'automaticaly' to non-primitive values and vice-versa. To convert between types, <em>implicit casts</em> are allowed when the compiler can reason they are safe. <em>Explicit casts</em> are potentially unsafe.\nYou have <em>generic types</em>, like <code class=\"language-text\">ArrayList&lt;Integer&gt;</code> or <code class=\"language-text\">Map&lt;String,Integer&gt;</code>, where generic types are denoted by a type variable (e.g. <code class=\"language-text\">ArrayList&lt;E&gt;</code> or <code class=\"language-text\">Map&lt;K,V&gt;</code> )</p><p>You also need to understand relations between types: </p><ul>\n<li>Interfaces can be implemented by classes, which implies objects of that class can also be used as the type of the interface. (subtype: class, supertype: interface)</li>\n<li>When working with inheritance, subclasses also are of the type of their superclass, but the other way around needs explicit casting.</li>\n<li>Relations can be visualized using a class hierarchy diagram (which can also show interfaces and abstract classes).</li>\n</ul><p>The compiler uses the type system to reason about the correctness of types in your code. You should be able to reason about types like the compiler does. This is an important skill when you are coding in a team, use libraries written by other people, etc.</p><h3>Casting and instanceof</h3><p>Suppose that we have a Herbivore which is a subclass of Creature. Which of the following assignments are okay?</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Herbivore</span> h <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Herbivore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Creature</span> c <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Herbivore</span> h2 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></code></pre></div><p>The third line is not, because a <code class=\"language-text\">Herbivore</code> is more specific than a <code class=\"language-text\">Creature</code> by being a subclass. Thus, the <code class=\"language-text\">Creature</code> object cannot be cast into a <code class=\"language-text\">Herbivore</code> object.\nThe second line, however, performs an implicit cast (it is always safe, since we go <em>from a subtype to a supertype</em>).\nIt is important that you can figure out these sorts of errors for Question 3 in the practice exam!\nIf we want to convert a creature to a human, we have to check the type of the creature and perform a cast afterwards.</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Human</span> h2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Human</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><h3>Objects</h3><p>You should be able to instantiate objects using their constructor.\nYou should understand that you can call methods on objects.</p><ul>\n<li>Within a class, you can just call the methods of the current object without using a\nperiod to call them. (e.g. within countFile() you can call count())</li>\n<li>When you call methods on other objects, you need the period.</li>\n</ul><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sizeSquared</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> col<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> col<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>You can also pass objects to methods and constructor (see above). You can obtain a reference to the <em>current</em> object via the <code class=\"language-text\">this</code> keyword.\nYou should be able to use some basic objects used during the assignments (e.g. <code class=\"language-text\">String</code>, <code class=\"language-text\">BigInteger</code>, <code class=\"language-text\">ArrayList</code>, <code class=\"language-text\">PrintWriter</code>, <code class=\"language-text\">Scanner</code>, etc.).\nAlso, you should be able to call and use methods of classes you have not seen before, but for which an explanation is provided of how they work.</p><h3>References and (Im)mutability</h3><p>Variables of non-primitive types hold references. We can have multiple references to the same object. This can lead to confusion if you modify the object using one reference, since these modifications will also be observable via the other references.\nA non-primitive variable can also hold a <code class=\"language-text\">null</code> reference. If that is the case calling a method on in or accessing an instance variables throws a <code class=\"language-text\">NullPointerException</code>.\nSome classes have been designed such that all modifications of an object are forbidden. Notable examples are <code class=\"language-text\">String</code> and <code class=\"language-text\">Integer</code>. Objects of these classes are called <em>immutable</em>. With such objects you don’t have to worry about the reference issue.\nOther classes, however, can be modified and are called <em>mutable</em>. The <code class=\"language-text\">Collection</code>s are notable examples.\nReasoning about references can be made easier using <em>Memory State Diagrams</em>.</p><h2>Exceptions</h2><p>When a problematic situation is detected, programs can and should raise an exception. In Java, an exception is raised using the <code class=\"language-text\">throw</code> keyword and an object of type <code class=\"language-text\">Throwable</code>.\nYou can indicate that a method might throw an Exception using the <code class=\"language-text\">throws</code> keyword in the method header.\nYou have multiple constructions with the <code class=\"language-text\">try</code> keyword:</p><ul>\n<li>The <code class=\"language-text\">try-catch</code> construction (multiple catch clauses allowed)</li>\n<li>The <code class=\"language-text\">try-finally</code> construction (executed as soon as the try clause is exited)</li>\n<li>The <code class=\"language-text\">try-catch-finally</code> construction (combination of above)</li>\n<li>The <code class=\"language-text\">try-with-resources</code> construction (no catch or finally necessary)</li>\n</ul><p>There are <em>checked exceptions</em> and <em>unchecked exceptions</em>. Subclasses of <code class=\"language-text\">Error</code> and <code class=\"language-text\">RuntimeException</code> are unchecked. All other exceptions are <em>checked exceptions</em>.\nChecked exceptions either need to be caught, or thrown the caller (this can be indicated with throws in the method header). This is not necessary for unchecked exceptions, but if you throw them, it is nice to still indicate this to other programmers in the method header.\nThe only checked Exceptions that you have dealt with are the <code class=\"language-text\">IOException</code> and <code class=\"language-text\">FileNotFoundException</code>.\nFor instance, the constructors of <code class=\"language-text\">Scanner</code>, <code class=\"language-text\">PrintWriter</code> and <code class=\"language-text\">FileInputStream</code> can throw a <code class=\"language-text\">FileNotFoundException</code>. The readLine() method of BufferedReader can throw a <code class=\"language-text\">IOException</code>.\nThis is not indicated in the reference you have available at the exam, so you should remember it!</p><h2>Interfaces</h2><p>dia 10</p></div>","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}},"allPages":{"edges":[{"node":{"id":"e134750f-f39c-5b39-89c1-96260ceaa0fe","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"abfe18c3-e107-5d71-a936-d76d2259da0f","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"22734cd6-5346-58d0-8ea4-707f2906badb","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"6a0962f1-71fe-50c9-bf11-53a7bdab01b7","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"393ad116-541f-5879-990d-db0db8eb0b1d","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"f049c83d-ac27-5959-afc7-2b50eccf047f","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"ba7ad054-b0b3-5af7-ad0e-5d1fcf462da4","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"123f129b-728a-5187-a7a4-995b8c635afe","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"de28f992-83f6-5230-85ab-0598a41c62b9","frontmatter":{"path":"/part-11/5-conclusion","title":"Conclusion"}}},{"node":{"id":"8163250b-26f2-5048-a9c2-3b979cf189cf","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"a3cf26da-7cfe-580e-af09-815a9610f47e","frontmatter":{"path":"/part-12/4-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"57522e7d-0e36-5e73-b6f1-938ef1defa1f","frontmatter":{"path":"/part-12/5-summary","title":"Summary"}}},{"node":{"id":"cb4a7da4-b79c-5410-ab14-58ee5e57a75c","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"478bd858-f5fc-5000-8129-80bfe2f61a36","frontmatter":{"path":"/part-13/1-graphical-user-interfaces","title":"Graphical user interfaces"}}},{"node":{"id":"802a1f5c-73a5-5e19-9208-e451b8be1fda","frontmatter":{"path":"/part-13/2-UI-components-and-layout","title":"UI components and their layout"}}},{"node":{"id":"260e84e1-5862-5dd5-9f3f-07b69fed9590","frontmatter":{"path":"/part-13/3-event-handling","title":"Event handling"}}},{"node":{"id":"f675cd3f-2d1d-5ae7-af37-3e297586d28d","frontmatter":{"path":"/part-13/4-launch-parameters","title":"Application's launch parameters"}}},{"node":{"id":"3d7abd39-da60-5400-94b3-89ab9a02f26e","frontmatter":{"path":"/part-13/5-multiple-views","title":"Multiple views"}}},{"node":{"id":"8edebb0c-deef-5615-a049-01073c5f3f14","frontmatter":{"path":"/part-13/6-summary","title":"Summary"}}},{"node":{"id":"1d060ad3-cb64-50a7-9e5b-51af2f56d0ee","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"67dc979b-b4fa-5747-91b6-2171f6892b2f","frontmatter":{"path":"/part-14/2-multimedia-in-programs","title":"Multimedia in programs"}}},{"node":{"id":"a2d78c97-b915-5edf-bfa7-a25501eac4f4","frontmatter":{"path":"/part-14/5-conclusion","title":"Conclusion"}}},{"node":{"id":"78a7351c-9ac4-5668-9efb-dce6f07d5b9f","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9b29fb61-e41b-5aaf-af4b-b84a1b6d77ab","frontmatter":{"path":"/part-8/5-fast-data-fetching-and-grouping-information","title":"Fast data fetching and grouping information"}}},{"node":{"id":"ed9ef945-a6c6-5a19-a1ff-d2c3ae6b29c2","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"fc9a1c58-5860-57aa-8e8e-c78936748fed","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"61070193-bb81-5ffe-9273-4d925cb903c4","frontmatter":{"path":"/week1/1-why-java","title":"Why Java?"}}},{"node":{"id":"9bef9515-fc84-54e8-991b-8d4b87d48498","frontmatter":{"path":"/week1/2-types-in-java","title":"Types in Java"}}},{"node":{"id":"805b2f4f-3ca8-5677-90af-19684fe2f1a6","frontmatter":{"path":"/week1/3-classes-and-objects-in-java","title":"Classes and objects in Java"}}},{"node":{"id":"03d10486-ab30-57f6-ae41-8a809bd25200","frontmatter":{"path":"/week1/4-immutable-objects","title":"Immutable Objects"}}},{"node":{"id":"5fef998d-749d-5c8b-904b-8f7c5e5f1bc7","frontmatter":{"path":"/week1","title":"Week 1"}}},{"node":{"id":"edae41ea-32c8-5c50-9c39-da6ddd03a27d","frontmatter":{"path":"/week2/1-random-numbers","title":"Random numbers"}}},{"node":{"id":"9652a1f5-fbda-5444-b959-73ebf75bca19","frontmatter":{"path":"/week2/2-errors-and-exceptions","title":"Errors and Exceptions"}}},{"node":{"id":"86f7525b-b9b1-5729-bf09-3387e6d0b002","frontmatter":{"path":"/week2/3-reading-and-writing","title":"Reading and Writing"}}},{"node":{"id":"c9b76dfc-c910-5472-afa6-40a5f92000a1","frontmatter":{"path":"/week2","title":"Week 2"}}},{"node":{"id":"daa93876-246f-56ba-855f-045a3ff4fba1","frontmatter":{"path":"/week3/1-Interfaces-and-polymorphism","title":"Interfaces and polymorphism"}}},{"node":{"id":"75db0ac4-4fcd-5090-a648-695c18e91099","frontmatter":{"path":"/week3/2-class-inheritance","title":"Class Inheritance"}}},{"node":{"id":"9d8c01bf-bc1d-58dc-b555-95c8cbd069db","frontmatter":{"path":"/week3/3-object-polymorphism","title":"Object polymorphism"}}},{"node":{"id":"dbddf2b6-a71c-56fd-9c56-28f0c2dfad18","frontmatter":{"path":"/week3/3-overriding-methods","title":"Overriding Methods"}}},{"node":{"id":"29356228-f933-5092-a438-05ad1e57d0fd","frontmatter":{"path":"/week3","title":"Week 3"}}},{"node":{"id":"3c77e811-0eeb-5f51-8e4b-6c358b63d2f2","frontmatter":{"path":"/week4/1-abstract-classes","title":"Abstract Classes and Methods"}}},{"node":{"id":"c1ca89fc-9a6b-5b7a-ba89-77760926e436","frontmatter":{"path":"/week4/2-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"a2e1847d-1ad2-5654-9375-887e0c855c19","frontmatter":{"path":"/week4/3-finding-and-comparing-objects","title":"Finding and Comparing objects"}}},{"node":{"id":"fd924f9e-b6ae-5fe8-939d-8694eb394d94","frontmatter":{"path":"/week4/4-ordered-objects","title":"Ordered Objects"}}},{"node":{"id":"8f905198-0f08-51ec-a3cb-feed80516f50","frontmatter":{"path":"/week4","title":"Week 4"}}},{"node":{"id":"0a57da2b-3b04-5ba0-af06-fb2b5243c2f9","frontmatter":{"path":"/week5/1-generics","title":"Generics"}}},{"node":{"id":"d5fcf95f-5161-58d6-b943-3f6281b745b6","frontmatter":{"path":"/week5/2-collection-interfaces","title":"Collection interfaces"}}},{"node":{"id":"8410b992-abaa-5d25-aed2-299951e44e2e","frontmatter":{"path":"/week5/2-hashmap","title":"ArrayList and hash table"}}},{"node":{"id":"0b2873e9-b5f8-5af8-9ff7-dd88fc021ae9","frontmatter":{"path":"/week5/3-hashmap-comparison","title":"Approximate comparison with hashmap"}}},{"node":{"id":"b4a29180-0c39-5ff6-95d3-de9e8cc7168e","frontmatter":{"path":"/week5/3-lists-and-queues","title":"Lists and queues"}}},{"node":{"id":"657a0c03-f70d-54a5-ab33-0adb79a83da3","frontmatter":{"path":"/week5","title":"Week 5"}}},{"node":{"id":"b813f2eb-7615-5115-a613-c40538f0c28e","frontmatter":{"path":"/week6/1-lambda-expressions","title":"Lambda Expressions"}}},{"node":{"id":"2fdbdcd1-cfe8-5358-b0ea-cddd193daa5a","frontmatter":{"path":"/week6/2-functional-interfaces-data-processing","title":"Functional Interfaces for Data Processing"}}},{"node":{"id":"e830ec0b-4d4c-5dd8-9616-d8b8abd50f52","frontmatter":{"path":"/week6/3-maven-and-third-party-libraries","title":"Maven and third-party libraries"}}},{"node":{"id":"cef8a4de-1c16-5a6c-bea4-5058c5fd09f8","frontmatter":{"path":"/week6/1-handling-collections-as-streams","title":"Handling collections as streams"}}},{"node":{"id":"0a0c87f7-d6f2-5b54-8dd3-4076833e2ae5","frontmatter":{"path":"/week6","title":"Week 6"}}},{"node":{"id":"51d89618-5d7b-52ac-91e0-3214b4b310aa","frontmatter":{"path":"/week7/1-course-overview","title":"Course overview"}}},{"node":{"id":"96059a86-7613-5510-b5bd-ecd25c444569","frontmatter":{"path":"/week7/2-packages","title":"Packages"}}},{"node":{"id":"cc29c79b-fb14-51a5-9bed-4ad14d32300e","frontmatter":{"path":"/week7/3-data-visualization","title":"Data visualization"}}},{"node":{"id":"1d68165d-e9e8-5b29-9c82-fcbbb6ac506a","frontmatter":{"path":"/week7","title":"Week 7"}}},{"node":{"id":"db8b48b0-6148-5e09-95e0-eb168bc4219b","frontmatter":{"path":"/part-14/3-larger-application-asteroids","title":"Larger application: Asteroids"}}},{"node":{"id":"6fea97f0-cbc2-5c70-b789-6f1e5660f0aa","frontmatter":{"path":"/week5/4-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"058233ef-86d9-514a-93bc-b43c1e0aeb69","frontmatter":{"path":"/week5/4-sets-and-maps","title":"Sets and Maps"}}},{"node":{"id":"8ca04fc2-6870-5aa5-ae15-f51ed9b1f72e","frontmatter":{"path":"/week5/2-hash-map","title":"Hash Map"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}