{"componentChunkName":"component---src-templates-course-content-template-js","path":"/week-6/5-complex-programs","result":{"data":{"page":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When you learn programming, you also develop a better eye for reading code (yours and others).\nIn this part we understood the use of lists and practiced separating the UI from the program logic."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following is from  "},{"type":"element","tagName":"a","properties":{"href":"https://www.cs.utexas.edu/users/EWD/ewd04xx/EWD447.PDF","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"On the role of scientific thought"}]},{"type":"text","value":" by Dutch computer scientist "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Edsger_W._Dijkstra","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Edsger W. Dijkstra"}]},{"type":"text","value":" ."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Let me try to explain to you, what to my taste is characteristic for all intelligent thinking. It is, that one is willing to study in depth an aspect of one's subject matter in isolation for the sake of its own consistency, all the time knowing that one is occupying oneself only with one of the aspects. We know that a program must be correct and we can study it from that viewpoint only; we also know that it should be efficient and we can study its efficiency on another day, so to speak. In another mood we may ask ourselves whether, and if so: why, the program is desirable. But nothing is gained - on the contrary! - by tackling these various aspects simultaneously. It is what I sometimes have called \""},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"the separation of concerns"}]},{"type":"text","value":"\", which, even if not perfectly possible, is yet the only available technique for effective ordering of one's thoughts, that I know of. This is what I mean by \"focusing one's attention upon some aspect\": it does not mean ignoring the other aspects, it is just doing justice to the fact that from this aspect's point of view, the other is irrelevant. It is being one- and multiple-track minded simultaneously."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The core of Dijkstra's message is, that the problem areas of a program must be separated from each other — this is exactly what we have been doing with object-oriented programming and by separating the UI from the program logic. Each problem area has been separated into its own part.\nThis can also be viewed through the lens of program responsibilities. In "},{"type":"element","tagName":"a","properties":{"href":"https://8thlight.com/blog/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"his blog"}]},{"type":"text","value":" Robert \"Unvle Bob\" C. Martin describes the term \""},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"single responsibility principle"}]},{"type":"text","value":"\":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"When you write a software module, you want to make sure that when changes are requested, those changes can only originate from a single person, or rather, a single tightly coupled group of people representing a single narrowly defined business function. You want to isolate your modules from the complexities of the organization as a whole, and design your systems such that each module is responsible (responds to) the needs of just that one business function."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"[..in other words..] Gather together the things that change for the same reasons. Separate those things that change for different reasons."}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Proper program structure and following good naming principles leads to clean code. When you code a bit more, you'll learn that each program part can be given one clear area of responsibility."}]}],"data":{"quirksMode":false}},"html":"<p>When you learn programming, you also develop a better eye for reading code (yours and others).\nIn this part we understood the use of lists and practiced separating the UI from the program logic.</p>\n<p>The following is from  <a href=\"https://www.cs.utexas.edu/users/EWD/ewd04xx/EWD447.PDF\" target=\"_blank\" rel=\"noopener noreferrer\">On the role of scientific thought</a> by Dutch computer scientist <a href=\"https://en.wikipedia.org/wiki/Edsger_W._Dijkstra\" target=\"_blank\" rel=\"noopener noreferrer\">Edsger W. Dijkstra</a> .</p>\n<p><em>Let me try to explain to you, what to my taste is characteristic for all intelligent thinking. It is, that one is willing to study in depth an aspect of one's subject matter in isolation for the sake of its own consistency, all the time knowing that one is occupying oneself only with one of the aspects. We know that a program must be correct and we can study it from that viewpoint only; we also know that it should be efficient and we can study its efficiency on another day, so to speak. In another mood we may ask ourselves whether, and if so: why, the program is desirable. But nothing is gained - on the contrary! - by tackling these various aspects simultaneously. It is what I sometimes have called \"<strong>the separation of concerns</strong>\", which, even if not perfectly possible, is yet the only available technique for effective ordering of one's thoughts, that I know of. This is what I mean by \"focusing one's attention upon some aspect\": it does not mean ignoring the other aspects, it is just doing justice to the fact that from this aspect's point of view, the other is irrelevant. It is being one- and multiple-track minded simultaneously.</em></p>\n<p>The core of Dijkstra's message is, that the problem areas of a program must be separated from each other — this is exactly what we have been doing with object-oriented programming and by separating the UI from the program logic. Each problem area has been separated into its own part.\nThis can also be viewed through the lens of program responsibilities. In <a href=\"https://8thlight.com/blog/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\" target=\"_blank\" rel=\"noopener noreferrer\">his blog</a> Robert \"Unvle Bob\" C. Martin describes the term \"<strong>single responsibility principle</strong>\":</p>\n<p><em>When you write a software module, you want to make sure that when changes are requested, those changes can only originate from a single person, or rather, a single tightly coupled group of people representing a single narrowly defined business function. You want to isolate your modules from the complexities of the organization as a whole, and design your systems such that each module is responsible (responds to) the needs of just that one business function.</em></p>\n<p><em>[..in other words..] Gather together the things that change for the same reasons. Separate those things that change for different reasons.</em></p>\n<p>Proper program structure and following good naming principles leads to clean code. When you code a bit more, you'll learn that each program part can be given one clear area of responsibility.</p>","frontmatter":{"path":"/week-6/5-complex-programs","title":"Complex programs"}},"allPages":{"edges":[{"node":{"id":"72706c47-29f3-5e7c-94a3-953c7ae8e314","frontmatter":{"path":"/credits","title":"Credits"}}},{"node":{"id":"7d5ba7a6-dca1-57f3-ae17-958d98ce7158","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"94ba547b-a1d7-5e7b-bb4e-6e028d32bb5b","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"32b44785-bc7e-59b9-a24a-38b0ed02db7c","frontmatter":{"path":"/","title":"About the Course"}}},{"node":{"id":"6e8ef3a4-7fb5-5a1b-b6d4-35e532cef07e","frontmatter":{"path":"/installation","title":"Installing IntelliJ"}}},{"node":{"id":"a769ff33-6948-5766-b065-b5685a35879a","frontmatter":{"path":"/sessions-and-support","title":"Sessions and support"}}},{"node":{"id":"3b8712e1-57ef-5957-b073-031be46059e6","frontmatter":{"path":"/style-guide","title":"Style guide"}}},{"node":{"id":"0c6894f0-8deb-55f7-8a9f-296cc4644124","frontmatter":{"path":"/week-1/1-the-java-language","title":"The Java Programming Language"}}},{"node":{"id":"02278f93-c78f-508c-95b6-86ccffa33dc4","frontmatter":{"path":"/week-1/2-first-programming-code","title":"First Programming Code"}}},{"node":{"id":"f9d8728e-914c-5b52-9178-024c07421b36","frontmatter":{"path":"/week-1/3-printing","title":"Printing"}}},{"node":{"id":"40f83534-3fdc-519e-95ab-8933f9f95f13","frontmatter":{"path":"/week-1/4-reading-input","title":"Reading Input"}}},{"node":{"id":"55acaea6-09ae-579a-b1b5-fce59ef71f4f","frontmatter":{"path":"/week-1/5-variables","title":"Variables"}}},{"node":{"id":"c4e4d20e-baea-5f81-9cb7-c8b27c41a726","frontmatter":{"path":"/week-1/6-calculating","title":"Calculating with Numbers"}}},{"node":{"id":"3b444c6d-11d1-5ffb-bcb5-50eb619acfae","frontmatter":{"path":"/week-1","title":"Week 1"}}},{"node":{"id":"bf2b9c70-b53a-59a5-b892-c91c7e4f792b","frontmatter":{"path":"/week-2/1-io-for-different types","title":"Reading and Printing Variables of Different Type"}}},{"node":{"id":"313b0aa8-9766-5154-a825-d6c10fe0f16d","frontmatter":{"path":"/week-2/2-conditional-statements","title":"Conditional Statements"}}},{"node":{"id":"b56edaa5-29c1-5c0d-aa1f-c5cad9b83e30","frontmatter":{"path":"/week-2/3-repeating","title":"Repeating functionality"}}},{"node":{"id":"960b8bbe-6e81-59b1-b8e4-7a4c6c32d18e","frontmatter":{"path":"/week-2/4-more-loops","title":"More loops"}}},{"node":{"id":"40c7b4a2-39d6-59ae-92f6-0379d1f677f7","frontmatter":{"path":"/week-2","title":"Week 2"}}},{"node":{"id":"24893e7e-3717-5c6a-881a-113a68c68828","frontmatter":{"path":"/week-3/1-discovering-errors","title":"Discovering and Solving Errors"}}},{"node":{"id":"c12a14b6-8b47-5349-9bb0-942381d20956","frontmatter":{"path":"/week-3/3-lists","title":"Lists"}}},{"node":{"id":"e7ffc2c1-5c6e-551f-ba13-ebaf73c07c2c","frontmatter":{"path":"/week-3","title":"Week 3"}}},{"node":{"id":"3cb68e18-c007-5060-9b65-77acc9220b97","frontmatter":{"path":"/week-4/1-arrays","title":"Arrays"}}},{"node":{"id":"c6f7ceb7-33ce-5dac-a550-b84eb5d78cd2","frontmatter":{"path":"/week-4/2-multidimensional-data","title":"Multidimensional data"}}},{"node":{"id":"ef2af675-b212-5273-8928-b7b74d00eb4f","frontmatter":{"path":"/week-4/3-introduction-to-object-oriented-programming","title":"Introduction to object-oriented programming"}}},{"node":{"id":"05b00a27-617b-5890-9d0b-95f773e38696","frontmatter":{"path":"/week-4","title":"Week 4"}}},{"node":{"id":"852ce7d7-6058-5440-906a-56f53eb99614","frontmatter":{"path":"/week-5/1-learning-object-oriented-programming","title":"Learning object-oriented programming"}}},{"node":{"id":"00470f1a-bf60-5e93-8346-1bd85e0a9dfc","frontmatter":{"path":"/week-5/2-objects-in-a-list","title":"Objects in a list"}}},{"node":{"id":"222f8707-38a4-568b-9c2f-9173c2dba6b8","frontmatter":{"path":"/week-5/3-method-and-constructor-overloading","title":"Removing repetitive code (overloading methods and constructors)"}}},{"node":{"id":"d415452d-0e93-5560-8820-687706a65dc2","frontmatter":{"path":"/week-5/4-primitive-and-reference-variables","title":"Primitive and reference variables"}}},{"node":{"id":"a0c2bcae-9e09-58d9-a2ee-875bd6cf765d","frontmatter":{"path":"/week-5/5-objects-and-references","title":"Objects and references"}}},{"node":{"id":"e2e485e8-a52c-5e31-99ce-8b71df1c5217","frontmatter":{"path":"/week-5","title":"Week 5"}}},{"node":{"id":"2d32c3c3-2c00-54b5-8796-ad16d6bd9a52","frontmatter":{"path":"/week-6/1-objects-within-objects","title":"Objects containing a list"}}},{"node":{"id":"110da207-6a1f-5a7f-ba62-f3bb8524e60a","frontmatter":{"path":"/week-6/2-files-and-reading-data","title":"Files and reading data"}}},{"node":{"id":"a02245ff-a681-5344-b9fb-af04554b7ae4","frontmatter":{"path":"/week-6/3-separating-user-interface-from-program-logic","title":"Separating the user interface from program logic"}}},{"node":{"id":"eec0037e-16f1-53c4-81f2-d70cf81a7ddf","frontmatter":{"path":"/week-6/4-using-existing-classes","title":"Using existing classes in Java"}}},{"node":{"id":"351dfaae-0a4f-5ac9-8576-4e380216525c","frontmatter":{"path":"/week-6/5-complex-programs","title":"Complex programs"}}},{"node":{"id":"fe26ed7d-727f-5db2-903e-84069aa7d2b2","frontmatter":{"path":"/week-6","title":"Week 6"}}},{"node":{"id":"6e43ff51-8298-5d8c-b847-6ef0c403445c","frontmatter":{"path":"/week-7","title":"Week 7"}}},{"node":{"id":"e936d8df-7cae-539c-96e5-1c0be17e03dc","frontmatter":{"path":"/week-3/2-methods","title":"Methods and dividing the program into smaller parts"}}}]}},"pageContext":{}},"staticQueryHashes":["2929037737","994120085"]}